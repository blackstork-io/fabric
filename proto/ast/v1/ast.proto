edition = "2023";

package ast.v1;

import "google/protobuf/any.proto";

message Node {
  repeated Node children = 1;
  oneof content {
    Paragraph paragraph = 3;
    Heading heading = 4;
    ThematicBreak thematic_break = 5;
    CodeBlock code_block = 6;
    Blockquote blockquote = 7;
    List list = 8;
    ListItem list_item = 9;
    HTMLBlock html_block = 10;

    // inlines
    Text text = 11;
    CodeSpan code_span = 12;
    Emphasis emphasis = 13;
    Link link = 14;
    Image image = 15;
    AutoLink auto_link = 16;
    HTMLInline html_inline = 17;

    // Github Flavored Markdown
    // blocks
    Table table = 18;
    TableRow table_row = 19;
    TableCell table_cell = 20;
    // inline
    TaskCheckbox task_checkbox = 21;
    Strikethrough strikethrough = 22;

    FabricDocument fabric_document = 252;
    FabricSection fabric_section = 253;
    // Root of the plugin-authored data
    FabricContent fabric_content = 254;
    // Custom node types can be serialized using this
    Custom custom = 255;
  }
}

// Node kinds

message Document {}

message Paragraph {
  bool is_text_block = 1;
}

message Heading {
  uint32 level = 1;
}

message ThematicBreak {}

message CodeBlock {
  bytes language = 1;
  bytes code = 2;
}

message Blockquote {}

message List {
  uint32 marker = 1;
  uint32 start = 2;
}

message ListItem {}

message HTMLBlock {
  bytes html = 1;
}

message Text {
  bytes text = 1;
  bool hard_line_break = 2;
}

message CodeSpan {
  bytes code = 1;
}

message Emphasis {
  int64 level = 1;
}

message Link {
  bytes destination = 1;
  bytes title = 2;
}

message Image {
  bytes source = 1;
  bytes alt = 2;
}

message AutoLink {
  bytes value = 1;
}

message HTMLInline {
  bytes html = 1;
}

enum CellAlignment {
  CELL_ALIGNMENT_UNSPECIFIED = 0;
  CELL_ALIGNMENT_LEFT = 1;
  CELL_ALIGNMENT_CENTER = 2;
  CELL_ALIGNMENT_RIGHT = 3;
}

message Table {
  repeated CellAlignment alignments = 2;
}
message TableRow {}

message TableCell {}

message TaskCheckbox {
  bool checked = 1;
}

message Strikethrough {}

message Custom {
  enum RenderScope {
    RENDER_SCOPE_UNSPECIFIED = 0;
    // Renderer receives only the current node
    RENDER_SCOPE_NODE = 1;
    // Renderer receives the entire parent content node
    RENDER_SCOPE_CONTENT = 2;
    // Renderer receives the entire parent section or a document (if not within a section)
    RENDER_SCOPE_SECTION = 3;
    // Renderer receives the entire parent document
    RENDER_SCOPE_DOCUMENT = 4;
  }
  // Emit node type with a relative path, ie "mymodule/mynode"
  // Consume node type as an absolute path, ie "types.blackstork.io/fabric/v1/custom_nodes/<plugin_name>/mymodule/mynode"
  google.protobuf.Any data = 1;
  RenderScope scope = 2;
}

message Path {
  repeated uint32 path = 1;
}

// Root of the plugin-authored data
message FabricContent {
  message Metadata {
    // ie "blackstork/builtin"
    string provider = 1;
    // ie "title"
    string plugin = 2;
    string version = 3;
  }
  Metadata meta = 1;
}

message FabricSection {}

message FabricDocument {}
