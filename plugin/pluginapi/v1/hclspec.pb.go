// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: pluginapi/v1/hclspec.proto

package pluginapiv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HclSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*HclSpec_Literal
	//	*HclSpec_Default
	//	*HclSpec_Object
	//	*HclSpec_Attr
	//	*HclSpec_Block
	//	*HclSpec_BlockAttrs
	//	*HclSpec_BlockList
	//	*HclSpec_BlockSet
	//	*HclSpec_BlockMap
	Data isHclSpec_Data `protobuf_oneof:"data"`
}

func (x *HclSpec) Reset() {
	*x = HclSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclSpec) ProtoMessage() {}

func (x *HclSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclSpec.ProtoReflect.Descriptor instead.
func (*HclSpec) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{0}
}

func (m *HclSpec) GetData() isHclSpec_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *HclSpec) GetLiteral() *HclLiteral {
	if x, ok := x.GetData().(*HclSpec_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *HclSpec) GetDefault() *HclDefault {
	if x, ok := x.GetData().(*HclSpec_Default); ok {
		return x.Default
	}
	return nil
}

func (x *HclSpec) GetObject() *HclObject {
	if x, ok := x.GetData().(*HclSpec_Object); ok {
		return x.Object
	}
	return nil
}

func (x *HclSpec) GetAttr() *HclAttr {
	if x, ok := x.GetData().(*HclSpec_Attr); ok {
		return x.Attr
	}
	return nil
}

func (x *HclSpec) GetBlock() *HclBlock {
	if x, ok := x.GetData().(*HclSpec_Block); ok {
		return x.Block
	}
	return nil
}

func (x *HclSpec) GetBlockAttrs() *HclBlockAttrs {
	if x, ok := x.GetData().(*HclSpec_BlockAttrs); ok {
		return x.BlockAttrs
	}
	return nil
}

func (x *HclSpec) GetBlockList() *HclBlockList {
	if x, ok := x.GetData().(*HclSpec_BlockList); ok {
		return x.BlockList
	}
	return nil
}

func (x *HclSpec) GetBlockSet() *HclBlockSet {
	if x, ok := x.GetData().(*HclSpec_BlockSet); ok {
		return x.BlockSet
	}
	return nil
}

func (x *HclSpec) GetBlockMap() *HclBlockMap {
	if x, ok := x.GetData().(*HclSpec_BlockMap); ok {
		return x.BlockMap
	}
	return nil
}

type isHclSpec_Data interface {
	isHclSpec_Data()
}

type HclSpec_Literal struct {
	Literal *HclLiteral `protobuf:"bytes,1,opt,name=literal,proto3,oneof"`
}

type HclSpec_Default struct {
	Default *HclDefault `protobuf:"bytes,2,opt,name=default,proto3,oneof"`
}

type HclSpec_Object struct {
	Object *HclObject `protobuf:"bytes,3,opt,name=object,proto3,oneof"`
}

type HclSpec_Attr struct {
	Attr *HclAttr `protobuf:"bytes,4,opt,name=attr,proto3,oneof"`
}

type HclSpec_Block struct {
	Block *HclBlock `protobuf:"bytes,5,opt,name=block,proto3,oneof"`
}

type HclSpec_BlockAttrs struct {
	BlockAttrs *HclBlockAttrs `protobuf:"bytes,6,opt,name=block_attrs,json=blockAttrs,proto3,oneof"`
}

type HclSpec_BlockList struct {
	BlockList *HclBlockList `protobuf:"bytes,7,opt,name=block_list,json=blockList,proto3,oneof"`
}

type HclSpec_BlockSet struct {
	BlockSet *HclBlockSet `protobuf:"bytes,8,opt,name=block_set,json=blockSet,proto3,oneof"`
}

type HclSpec_BlockMap struct {
	BlockMap *HclBlockMap `protobuf:"bytes,9,opt,name=block_map,json=blockMap,proto3,oneof"`
}

func (*HclSpec_Literal) isHclSpec_Data() {}

func (*HclSpec_Default) isHclSpec_Data() {}

func (*HclSpec_Object) isHclSpec_Data() {}

func (*HclSpec_Attr) isHclSpec_Data() {}

func (*HclSpec_Block) isHclSpec_Data() {}

func (*HclSpec_BlockAttrs) isHclSpec_Data() {}

func (*HclSpec_BlockList) isHclSpec_Data() {}

func (*HclSpec_BlockSet) isHclSpec_Data() {}

func (*HclSpec_BlockMap) isHclSpec_Data() {}

type HclLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *CtyValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HclLiteral) Reset() {
	*x = HclLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclLiteral) ProtoMessage() {}

func (x *HclLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclLiteral.ProtoReflect.Descriptor instead.
func (*HclLiteral) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{1}
}

func (x *HclLiteral) GetValue() *CtyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type HclDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default *HclSpec `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	Primary *HclSpec `protobuf:"bytes,2,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *HclDefault) Reset() {
	*x = HclDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclDefault) ProtoMessage() {}

func (x *HclDefault) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclDefault.ProtoReflect.Descriptor instead.
func (*HclDefault) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{2}
}

func (x *HclDefault) GetDefault() *HclSpec {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *HclDefault) GetPrimary() *HclSpec {
	if x != nil {
		return x.Primary
	}
	return nil
}

type HclObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs map[string]*HclSpec `protobuf:"bytes,1,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HclObject) Reset() {
	*x = HclObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclObject) ProtoMessage() {}

func (x *HclObject) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclObject.ProtoReflect.Descriptor instead.
func (*HclObject) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{3}
}

func (x *HclObject) GetAttrs() map[string]*HclSpec {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type HclAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     *CtyType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Required bool     `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *HclAttr) Reset() {
	*x = HclAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclAttr) ProtoMessage() {}

func (x *HclAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclAttr.ProtoReflect.Descriptor instead.
func (*HclAttr) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{4}
}

func (x *HclAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HclAttr) GetType() *CtyType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *HclAttr) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type HclBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool     `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Nested   *HclSpec `protobuf:"bytes,3,opt,name=nested,proto3" json:"nested,omitempty"`
}

func (x *HclBlock) Reset() {
	*x = HclBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclBlock) ProtoMessage() {}

func (x *HclBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclBlock.ProtoReflect.Descriptor instead.
func (*HclBlock) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{5}
}

func (x *HclBlock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HclBlock) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *HclBlock) GetNested() *HclSpec {
	if x != nil {
		return x.Nested
	}
	return nil
}

type HclBlockAttrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     *CtyType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Required bool     `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *HclBlockAttrs) Reset() {
	*x = HclBlockAttrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclBlockAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclBlockAttrs) ProtoMessage() {}

func (x *HclBlockAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclBlockAttrs.ProtoReflect.Descriptor instead.
func (*HclBlockAttrs) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{6}
}

func (x *HclBlockAttrs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HclBlockAttrs) GetType() *CtyType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *HclBlockAttrs) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type HclBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nested   *HclSpec `protobuf:"bytes,2,opt,name=nested,proto3" json:"nested,omitempty"`
	MinItems int64    `protobuf:"varint,3,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	MaxItems int64    `protobuf:"varint,4,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
}

func (x *HclBlockList) Reset() {
	*x = HclBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclBlockList) ProtoMessage() {}

func (x *HclBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclBlockList.ProtoReflect.Descriptor instead.
func (*HclBlockList) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{7}
}

func (x *HclBlockList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HclBlockList) GetNested() *HclSpec {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *HclBlockList) GetMinItems() int64 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *HclBlockList) GetMaxItems() int64 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

type HclBlockSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nested   *HclSpec `protobuf:"bytes,2,opt,name=nested,proto3" json:"nested,omitempty"`
	MinItems int64    `protobuf:"varint,3,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	MaxItems int64    `protobuf:"varint,4,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
}

func (x *HclBlockSet) Reset() {
	*x = HclBlockSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclBlockSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclBlockSet) ProtoMessage() {}

func (x *HclBlockSet) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclBlockSet.ProtoReflect.Descriptor instead.
func (*HclBlockSet) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{8}
}

func (x *HclBlockSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HclBlockSet) GetNested() *HclSpec {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *HclBlockSet) GetMinItems() int64 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *HclBlockSet) GetMaxItems() int64 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

type HclBlockMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nested *HclSpec `protobuf:"bytes,2,opt,name=nested,proto3" json:"nested,omitempty"`
	Labels []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *HclBlockMap) Reset() {
	*x = HclBlockMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_v1_hclspec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HclBlockMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HclBlockMap) ProtoMessage() {}

func (x *HclBlockMap) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_hclspec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HclBlockMap.ProtoReflect.Descriptor instead.
func (*HclBlockMap) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_hclspec_proto_rawDescGZIP(), []int{9}
}

func (x *HclBlockMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HclBlockMap) GetNested() *HclSpec {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *HclBlockMap) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_pluginapi_v1_hclspec_proto protoreflect.FileDescriptor

var file_pluginapi_v1_hclspec_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x63, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfe, 0x03, 0x0a, 0x07, 0x48, 0x63, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34,
	0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x63, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x48, 0x00, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x63, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0a, 0x48, 0x63, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x6e, 0x0a, 0x0a, 0x48, 0x63, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x63, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x96, 0x01, 0x0a, 0x09, 0x48, 0x63, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x07, 0x48, 0x63, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x69,
	0x0a, 0x08, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x6a, 0x0a, 0x0d, 0x48, 0x63, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x68, 0x0a, 0x0b, 0x48, 0x63, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x63, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0xb2, 0x01, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x48, 0x63, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x73, 0x74, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6f, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pluginapi_v1_hclspec_proto_rawDescOnce sync.Once
	file_pluginapi_v1_hclspec_proto_rawDescData = file_pluginapi_v1_hclspec_proto_rawDesc
)

func file_pluginapi_v1_hclspec_proto_rawDescGZIP() []byte {
	file_pluginapi_v1_hclspec_proto_rawDescOnce.Do(func() {
		file_pluginapi_v1_hclspec_proto_rawDescData = protoimpl.X.CompressGZIP(file_pluginapi_v1_hclspec_proto_rawDescData)
	})
	return file_pluginapi_v1_hclspec_proto_rawDescData
}

var file_pluginapi_v1_hclspec_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pluginapi_v1_hclspec_proto_goTypes = []interface{}{
	(*HclSpec)(nil),       // 0: pluginapi.v1.HclSpec
	(*HclLiteral)(nil),    // 1: pluginapi.v1.HclLiteral
	(*HclDefault)(nil),    // 2: pluginapi.v1.HclDefault
	(*HclObject)(nil),     // 3: pluginapi.v1.HclObject
	(*HclAttr)(nil),       // 4: pluginapi.v1.HclAttr
	(*HclBlock)(nil),      // 5: pluginapi.v1.HclBlock
	(*HclBlockAttrs)(nil), // 6: pluginapi.v1.HclBlockAttrs
	(*HclBlockList)(nil),  // 7: pluginapi.v1.HclBlockList
	(*HclBlockSet)(nil),   // 8: pluginapi.v1.HclBlockSet
	(*HclBlockMap)(nil),   // 9: pluginapi.v1.HclBlockMap
	nil,                   // 10: pluginapi.v1.HclObject.AttrsEntry
	(*CtyValue)(nil),      // 11: pluginapi.v1.CtyValue
	(*CtyType)(nil),       // 12: pluginapi.v1.CtyType
}
var file_pluginapi_v1_hclspec_proto_depIdxs = []int32{
	1,  // 0: pluginapi.v1.HclSpec.literal:type_name -> pluginapi.v1.HclLiteral
	2,  // 1: pluginapi.v1.HclSpec.default:type_name -> pluginapi.v1.HclDefault
	3,  // 2: pluginapi.v1.HclSpec.object:type_name -> pluginapi.v1.HclObject
	4,  // 3: pluginapi.v1.HclSpec.attr:type_name -> pluginapi.v1.HclAttr
	5,  // 4: pluginapi.v1.HclSpec.block:type_name -> pluginapi.v1.HclBlock
	6,  // 5: pluginapi.v1.HclSpec.block_attrs:type_name -> pluginapi.v1.HclBlockAttrs
	7,  // 6: pluginapi.v1.HclSpec.block_list:type_name -> pluginapi.v1.HclBlockList
	8,  // 7: pluginapi.v1.HclSpec.block_set:type_name -> pluginapi.v1.HclBlockSet
	9,  // 8: pluginapi.v1.HclSpec.block_map:type_name -> pluginapi.v1.HclBlockMap
	11, // 9: pluginapi.v1.HclLiteral.value:type_name -> pluginapi.v1.CtyValue
	0,  // 10: pluginapi.v1.HclDefault.default:type_name -> pluginapi.v1.HclSpec
	0,  // 11: pluginapi.v1.HclDefault.primary:type_name -> pluginapi.v1.HclSpec
	10, // 12: pluginapi.v1.HclObject.attrs:type_name -> pluginapi.v1.HclObject.AttrsEntry
	12, // 13: pluginapi.v1.HclAttr.type:type_name -> pluginapi.v1.CtyType
	0,  // 14: pluginapi.v1.HclBlock.nested:type_name -> pluginapi.v1.HclSpec
	12, // 15: pluginapi.v1.HclBlockAttrs.type:type_name -> pluginapi.v1.CtyType
	0,  // 16: pluginapi.v1.HclBlockList.nested:type_name -> pluginapi.v1.HclSpec
	0,  // 17: pluginapi.v1.HclBlockSet.nested:type_name -> pluginapi.v1.HclSpec
	0,  // 18: pluginapi.v1.HclBlockMap.nested:type_name -> pluginapi.v1.HclSpec
	0,  // 19: pluginapi.v1.HclObject.AttrsEntry.value:type_name -> pluginapi.v1.HclSpec
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pluginapi_v1_hclspec_proto_init() }
func file_pluginapi_v1_hclspec_proto_init() {
	if File_pluginapi_v1_hclspec_proto != nil {
		return
	}
	file_pluginapi_v1_cty_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pluginapi_v1_hclspec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclBlockAttrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclBlockSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_v1_hclspec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HclBlockMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pluginapi_v1_hclspec_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*HclSpec_Literal)(nil),
		(*HclSpec_Default)(nil),
		(*HclSpec_Object)(nil),
		(*HclSpec_Attr)(nil),
		(*HclSpec_Block)(nil),
		(*HclSpec_BlockAttrs)(nil),
		(*HclSpec_BlockList)(nil),
		(*HclSpec_BlockSet)(nil),
		(*HclSpec_BlockMap)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pluginapi_v1_hclspec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pluginapi_v1_hclspec_proto_goTypes,
		DependencyIndexes: file_pluginapi_v1_hclspec_proto_depIdxs,
		MessageInfos:      file_pluginapi_v1_hclspec_proto_msgTypes,
	}.Build()
	File_pluginapi_v1_hclspec_proto = out.File
	file_pluginapi_v1_hclspec_proto_rawDesc = nil
	file_pluginapi_v1_hclspec_proto_goTypes = nil
	file_pluginapi_v1_hclspec_proto_depIdxs = nil
}
