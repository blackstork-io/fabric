// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: pluginapi/v1/schema.proto

package pluginapiv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvocationOrder int32

const (
	InvocationOrder_INVOCATION_ORDER_UNSPECIFIED InvocationOrder = 0
	InvocationOrder_INVOCATION_ORDER_BEGIN       InvocationOrder = 2
	InvocationOrder_INVOCATION_ORDER_END         InvocationOrder = 3
)

// Enum value maps for InvocationOrder.
var (
	InvocationOrder_name = map[int32]string{
		0: "INVOCATION_ORDER_UNSPECIFIED",
		2: "INVOCATION_ORDER_BEGIN",
		3: "INVOCATION_ORDER_END",
	}
	InvocationOrder_value = map[string]int32{
		"INVOCATION_ORDER_UNSPECIFIED": 0,
		"INVOCATION_ORDER_BEGIN":       2,
		"INVOCATION_ORDER_END":         3,
	}
)

func (x InvocationOrder) Enum() *InvocationOrder {
	p := new(InvocationOrder)
	*p = x
	return p
}

func (x InvocationOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvocationOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_pluginapi_v1_schema_proto_enumTypes[0].Descriptor()
}

func (InvocationOrder) Type() protoreflect.EnumType {
	return &file_pluginapi_v1_schema_proto_enumTypes[0]
}

func (x InvocationOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvocationOrder.Descriptor instead.
func (InvocationOrder) EnumDescriptor() ([]byte, []int) {
	return file_pluginapi_v1_schema_proto_rawDescGZIP(), []int{0}
}

type OutputFormat int32

const (
	OutputFormat_OUTPUT_FORMAT_UNSPECIFIED OutputFormat = 0
	OutputFormat_OUTPUT_FORMAT_MD          OutputFormat = 1
	OutputFormat_OUTPUT_FORMAT_HTML        OutputFormat = 2
	OutputFormat_OUTPUT_FORMAT_PDF         OutputFormat = 3
)

// Enum value maps for OutputFormat.
var (
	OutputFormat_name = map[int32]string{
		0: "OUTPUT_FORMAT_UNSPECIFIED",
		1: "OUTPUT_FORMAT_MD",
		2: "OUTPUT_FORMAT_HTML",
		3: "OUTPUT_FORMAT_PDF",
	}
	OutputFormat_value = map[string]int32{
		"OUTPUT_FORMAT_UNSPECIFIED": 0,
		"OUTPUT_FORMAT_MD":          1,
		"OUTPUT_FORMAT_HTML":        2,
		"OUTPUT_FORMAT_PDF":         3,
	}
)

func (x OutputFormat) Enum() *OutputFormat {
	p := new(OutputFormat)
	*p = x
	return p
}

func (x OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pluginapi_v1_schema_proto_enumTypes[1].Descriptor()
}

func (OutputFormat) Type() protoreflect.EnumType {
	return &file_pluginapi_v1_schema_proto_enumTypes[1]
}

func (x OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputFormat.Descriptor instead.
func (OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_pluginapi_v1_schema_proto_rawDescGZIP(), []int{1}
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Plugin components
	DataSources      map[string]*DataSourceSchema      `protobuf:"bytes,3,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContentProviders map[string]*ContentProviderSchema `protobuf:"bytes,4,rep,name=content_providers,json=contentProviders,proto3" json:"content_providers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Publishers       map[string]*PublisherSchema       `protobuf:"bytes,7,rep,name=publishers,proto3" json:"publishers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Doc              string                            `protobuf:"bytes,5,opt,name=doc,proto3" json:"doc,omitempty"`
	Tags             []string                          `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_pluginapi_v1_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Schema) GetDataSources() map[string]*DataSourceSchema {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *Schema) GetContentProviders() map[string]*ContentProviderSchema {
	if x != nil {
		return x.ContentProviders
	}
	return nil
}

func (x *Schema) GetPublishers() map[string]*PublisherSchema {
	if x != nil {
		return x.Publishers
	}
	return nil
}

func (x *Schema) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *Schema) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DataSourceSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args   *BlockSpec `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	Config *BlockSpec `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Doc    string     `protobuf:"bytes,5,opt,name=doc,proto3" json:"doc,omitempty"`
	Tags   []string   `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DataSourceSchema) Reset() {
	*x = DataSourceSchema{}
	mi := &file_pluginapi_v1_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSchema) ProtoMessage() {}

func (x *DataSourceSchema) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSchema.ProtoReflect.Descriptor instead.
func (*DataSourceSchema) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *DataSourceSchema) GetArgs() *BlockSpec {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *DataSourceSchema) GetConfig() *BlockSpec {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DataSourceSchema) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *DataSourceSchema) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ContentProviderSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args            *BlockSpec      `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Config          *BlockSpec      `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	InvocationOrder InvocationOrder `protobuf:"varint,3,opt,name=invocation_order,json=invocationOrder,proto3,enum=pluginapi.v1.InvocationOrder" json:"invocation_order,omitempty"`
	Doc             string          `protobuf:"bytes,6,opt,name=doc,proto3" json:"doc,omitempty"`
	Tags            []string        `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ContentProviderSchema) Reset() {
	*x = ContentProviderSchema{}
	mi := &file_pluginapi_v1_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentProviderSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentProviderSchema) ProtoMessage() {}

func (x *ContentProviderSchema) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentProviderSchema.ProtoReflect.Descriptor instead.
func (*ContentProviderSchema) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_schema_proto_rawDescGZIP(), []int{2}
}

func (x *ContentProviderSchema) GetArgs() *BlockSpec {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ContentProviderSchema) GetConfig() *BlockSpec {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ContentProviderSchema) GetInvocationOrder() InvocationOrder {
	if x != nil {
		return x.InvocationOrder
	}
	return InvocationOrder_INVOCATION_ORDER_UNSPECIFIED
}

func (x *ContentProviderSchema) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *ContentProviderSchema) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PublisherSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args           *BlockSpec     `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`
	Config         *BlockSpec     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Doc            string         `protobuf:"bytes,3,opt,name=doc,proto3" json:"doc,omitempty"`
	Tags           []string       `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	AllowedFormats []OutputFormat `protobuf:"varint,5,rep,packed,name=allowed_formats,json=allowedFormats,proto3,enum=pluginapi.v1.OutputFormat" json:"allowed_formats,omitempty"`
}

func (x *PublisherSchema) Reset() {
	*x = PublisherSchema{}
	mi := &file_pluginapi_v1_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublisherSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherSchema) ProtoMessage() {}

func (x *PublisherSchema) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherSchema.ProtoReflect.Descriptor instead.
func (*PublisherSchema) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_schema_proto_rawDescGZIP(), []int{3}
}

func (x *PublisherSchema) GetArgs() *BlockSpec {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PublisherSchema) GetConfig() *BlockSpec {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PublisherSchema) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *PublisherSchema) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublisherSchema) GetAllowedFormats() []OutputFormat {
	if x != nil {
		return x.AllowedFormats
	}
	return nil
}

var File_pluginapi_v1_schema_proto protoreflect.FileDescriptor

var file_pluginapi_v1_schema_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x04, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x5e,
	0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0xe5, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x43, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x2a, 0x69, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x2a,
	0x72, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x4d, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x44,
	0x46, 0x10, 0x03, 0x42, 0xb1, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x6b, 0x2d, 0x69,
	0x6f, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02,
	0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pluginapi_v1_schema_proto_rawDescOnce sync.Once
	file_pluginapi_v1_schema_proto_rawDescData = file_pluginapi_v1_schema_proto_rawDesc
)

func file_pluginapi_v1_schema_proto_rawDescGZIP() []byte {
	file_pluginapi_v1_schema_proto_rawDescOnce.Do(func() {
		file_pluginapi_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_pluginapi_v1_schema_proto_rawDescData)
	})
	return file_pluginapi_v1_schema_proto_rawDescData
}

var file_pluginapi_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pluginapi_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pluginapi_v1_schema_proto_goTypes = []any{
	(InvocationOrder)(0),          // 0: pluginapi.v1.InvocationOrder
	(OutputFormat)(0),             // 1: pluginapi.v1.OutputFormat
	(*Schema)(nil),                // 2: pluginapi.v1.Schema
	(*DataSourceSchema)(nil),      // 3: pluginapi.v1.DataSourceSchema
	(*ContentProviderSchema)(nil), // 4: pluginapi.v1.ContentProviderSchema
	(*PublisherSchema)(nil),       // 5: pluginapi.v1.PublisherSchema
	nil,                           // 6: pluginapi.v1.Schema.DataSourcesEntry
	nil,                           // 7: pluginapi.v1.Schema.ContentProvidersEntry
	nil,                           // 8: pluginapi.v1.Schema.PublishersEntry
	(*BlockSpec)(nil),             // 9: pluginapi.v1.BlockSpec
}
var file_pluginapi_v1_schema_proto_depIdxs = []int32{
	6,  // 0: pluginapi.v1.Schema.data_sources:type_name -> pluginapi.v1.Schema.DataSourcesEntry
	7,  // 1: pluginapi.v1.Schema.content_providers:type_name -> pluginapi.v1.Schema.ContentProvidersEntry
	8,  // 2: pluginapi.v1.Schema.publishers:type_name -> pluginapi.v1.Schema.PublishersEntry
	9,  // 3: pluginapi.v1.DataSourceSchema.args:type_name -> pluginapi.v1.BlockSpec
	9,  // 4: pluginapi.v1.DataSourceSchema.config:type_name -> pluginapi.v1.BlockSpec
	9,  // 5: pluginapi.v1.ContentProviderSchema.args:type_name -> pluginapi.v1.BlockSpec
	9,  // 6: pluginapi.v1.ContentProviderSchema.config:type_name -> pluginapi.v1.BlockSpec
	0,  // 7: pluginapi.v1.ContentProviderSchema.invocation_order:type_name -> pluginapi.v1.InvocationOrder
	9,  // 8: pluginapi.v1.PublisherSchema.args:type_name -> pluginapi.v1.BlockSpec
	9,  // 9: pluginapi.v1.PublisherSchema.config:type_name -> pluginapi.v1.BlockSpec
	1,  // 10: pluginapi.v1.PublisherSchema.allowed_formats:type_name -> pluginapi.v1.OutputFormat
	3,  // 11: pluginapi.v1.Schema.DataSourcesEntry.value:type_name -> pluginapi.v1.DataSourceSchema
	4,  // 12: pluginapi.v1.Schema.ContentProvidersEntry.value:type_name -> pluginapi.v1.ContentProviderSchema
	5,  // 13: pluginapi.v1.Schema.PublishersEntry.value:type_name -> pluginapi.v1.PublisherSchema
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pluginapi_v1_schema_proto_init() }
func file_pluginapi_v1_schema_proto_init() {
	if File_pluginapi_v1_schema_proto != nil {
		return
	}
	file_pluginapi_v1_dataspec_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pluginapi_v1_schema_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pluginapi_v1_schema_proto_goTypes,
		DependencyIndexes: file_pluginapi_v1_schema_proto_depIdxs,
		EnumInfos:         file_pluginapi_v1_schema_proto_enumTypes,
		MessageInfos:      file_pluginapi_v1_schema_proto_msgTypes,
	}.Build()
	File_pluginapi_v1_schema_proto = out.File
	file_pluginapi_v1_schema_proto_rawDesc = nil
	file_pluginapi_v1_schema_proto_goTypes = nil
	file_pluginapi_v1_schema_proto_depIdxs = nil
}
