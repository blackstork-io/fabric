// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: pluginapi/v1/plugin.proto

package pluginapiv1

import (
	v1 "github.com/blackstork-io/fabric/plugin/ast/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{0}
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        *Schema                `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *GetSchemaResponse) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type RetrieveDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Args          *Block                 `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Config        *Block                 `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveDataRequest) Reset() {
	*x = RetrieveDataRequest{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveDataRequest) ProtoMessage() {}

func (x *RetrieveDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveDataRequest.ProtoReflect.Descriptor instead.
func (*RetrieveDataRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *RetrieveDataRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RetrieveDataRequest) GetArgs() *Block {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RetrieveDataRequest) GetConfig() *Block {
	if x != nil {
		return x.Config
	}
	return nil
}

type RetrieveDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *Data                  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Diagnostics   []*Diagnostic          `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveDataResponse) Reset() {
	*x = RetrieveDataResponse{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveDataResponse) ProtoMessage() {}

func (x *RetrieveDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveDataResponse.ProtoReflect.Descriptor instead.
func (*RetrieveDataResponse) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveDataResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RetrieveDataResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type ProvideContentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Args          *Block                 `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Config        *Block                 `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	DataContext   *MapData               `protobuf:"bytes,4,opt,name=data_context,json=dataContext,proto3" json:"data_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvideContentRequest) Reset() {
	*x = ProvideContentRequest{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvideContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideContentRequest) ProtoMessage() {}

func (x *ProvideContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideContentRequest.ProtoReflect.Descriptor instead.
func (*ProvideContentRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *ProvideContentRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProvideContentRequest) GetArgs() *Block {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProvideContentRequest) GetConfig() *Block {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ProvideContentRequest) GetDataContext() *MapData {
	if x != nil {
		return x.DataContext
	}
	return nil
}

type ProvideContentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *v1.Node               `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Diagnostics   []*Diagnostic          `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvideContentResponse) Reset() {
	*x = ProvideContentResponse{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvideContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideContentResponse) ProtoMessage() {}

func (x *ProvideContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideContentResponse.ProtoReflect.Descriptor instead.
func (*ProvideContentResponse) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *ProvideContentResponse) GetResult() *v1.Node {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ProvideContentResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type PublisherInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Publisher     string                 `protobuf:"bytes,1,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Args          *Block                 `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Config        *Block                 `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublisherInfoRequest) Reset() {
	*x = PublisherInfoRequest{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublisherInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherInfoRequest) ProtoMessage() {}

func (x *PublisherInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherInfoRequest.ProtoReflect.Descriptor instead.
func (*PublisherInfoRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *PublisherInfoRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *PublisherInfoRequest) GetArgs() *Block {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PublisherInfoRequest) GetConfig() *Block {
	if x != nil {
		return x.Config
	}
	return nil
}

type NodeSupportInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Custom nodes that are natively supported by the publisher
	SupportedCustomNodes []string `protobuf:"bytes,1,rep,name=supported_custom_nodes,json=supportedCustomNodes,proto3" json:"supported_custom_nodes,omitempty"`
	// Regular nodes that are not supported by the publisher
	UnsupportedNodes []string `protobuf:"bytes,2,rep,name=unsupported_nodes,json=unsupportedNodes,proto3" json:"unsupported_nodes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NodeSupportInfo) Reset() {
	*x = NodeSupportInfo{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeSupportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSupportInfo) ProtoMessage() {}

func (x *NodeSupportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSupportInfo.ProtoReflect.Descriptor instead.
func (*NodeSupportInfo) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *NodeSupportInfo) GetSupportedCustomNodes() []string {
	if x != nil {
		return x.SupportedCustomNodes
	}
	return nil
}

func (x *NodeSupportInfo) GetUnsupportedNodes() []string {
	if x != nil {
		return x.UnsupportedNodes
	}
	return nil
}

type PublisherInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublisherInfo *NodeSupportInfo       `protobuf:"bytes,1,opt,name=publisher_info,json=publisherInfo,proto3" json:"publisher_info,omitempty"`
	Diagnostics   []*Diagnostic          `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublisherInfoResponse) Reset() {
	*x = PublisherInfoResponse{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublisherInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherInfoResponse) ProtoMessage() {}

func (x *PublisherInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherInfoResponse.ProtoReflect.Descriptor instead.
func (*PublisherInfoResponse) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *PublisherInfoResponse) GetPublisherInfo() *NodeSupportInfo {
	if x != nil {
		return x.PublisherInfo
	}
	return nil
}

func (x *PublisherInfoResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type RenderNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subtree       *v1.Node               `protobuf:"bytes,1,opt,name=subtree,proto3" json:"subtree,omitempty"`
	NodePath      *v1.Path               `protobuf:"bytes,2,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	Publisher     string                 `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
	PublisherInfo *NodeSupportInfo       `protobuf:"bytes,4,opt,name=publisher_info,json=publisherInfo,proto3" json:"publisher_info,omitempty"`
	// All registered custom node renderers
	CustomNodeRenderers []string `protobuf:"bytes,5,rep,name=custom_node_renderers,json=customNodeRenderers,proto3" json:"custom_node_renderers,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RenderNodeRequest) Reset() {
	*x = RenderNodeRequest{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderNodeRequest) ProtoMessage() {}

func (x *RenderNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderNodeRequest.ProtoReflect.Descriptor instead.
func (*RenderNodeRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *RenderNodeRequest) GetSubtree() *v1.Node {
	if x != nil {
		return x.Subtree
	}
	return nil
}

func (x *RenderNodeRequest) GetNodePath() *v1.Path {
	if x != nil {
		return x.NodePath
	}
	return nil
}

func (x *RenderNodeRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *RenderNodeRequest) GetPublisherInfo() *NodeSupportInfo {
	if x != nil {
		return x.PublisherInfo
	}
	return nil
}

func (x *RenderNodeRequest) GetCustomNodeRenderers() []string {
	if x != nil {
		return x.CustomNodeRenderers
	}
	return nil
}

type RenderNodeResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SubtreeReplacement *v1.Node               `protobuf:"bytes,1,opt,name=subtree_replacement,json=subtreeReplacement,proto3" json:"subtree_replacement,omitempty"`
	Diagnostics        []*Diagnostic          `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RenderNodeResponse) Reset() {
	*x = RenderNodeResponse{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderNodeResponse) ProtoMessage() {}

func (x *RenderNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderNodeResponse.ProtoReflect.Descriptor instead.
func (*RenderNodeResponse) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *RenderNodeResponse) GetSubtreeReplacement() *v1.Node {
	if x != nil {
		return x.SubtreeReplacement
	}
	return nil
}

func (x *RenderNodeResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type PublishRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Publisher     string                 `protobuf:"bytes,1,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Args          *Block                 `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Config        *Block                 `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	DataContext   *MapData               `protobuf:"bytes,4,opt,name=data_context,json=dataContext,proto3" json:"data_context,omitempty"`
	Document      *v1.Node               `protobuf:"bytes,5,opt,name=document,proto3" json:"document,omitempty"`
	DocumentName  string                 `protobuf:"bytes,6,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *PublishRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *PublishRequest) GetArgs() *Block {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PublishRequest) GetConfig() *Block {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PublishRequest) GetDataContext() *MapData {
	if x != nil {
		return x.DataContext
	}
	return nil
}

func (x *PublishRequest) GetDocument() *v1.Node {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *PublishRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

type PublishResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Diagnostics   []*Diagnostic          `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_v1_plugin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_pluginapi_v1_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *PublishResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

var File_pluginapi_v1_plugin_proto protoreflect.FileDescriptor

var file_pluginapi_v1_plugin_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x83, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x7a, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xc3, 0x01,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x7a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x8a, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x74, 0x0a, 0x0f,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x12, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0x8d, 0x02, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x32, 0x90, 0x04, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x1e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x07, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0xb1, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x6b, 0x2d, 0x69,
	0x6f, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02,
	0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pluginapi_v1_plugin_proto_rawDescOnce sync.Once
	file_pluginapi_v1_plugin_proto_rawDescData = file_pluginapi_v1_plugin_proto_rawDesc
)

func file_pluginapi_v1_plugin_proto_rawDescGZIP() []byte {
	file_pluginapi_v1_plugin_proto_rawDescOnce.Do(func() {
		file_pluginapi_v1_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_pluginapi_v1_plugin_proto_rawDescData)
	})
	return file_pluginapi_v1_plugin_proto_rawDescData
}

var file_pluginapi_v1_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pluginapi_v1_plugin_proto_goTypes = []any{
	(*GetSchemaRequest)(nil),       // 0: pluginapi.v1.GetSchemaRequest
	(*GetSchemaResponse)(nil),      // 1: pluginapi.v1.GetSchemaResponse
	(*RetrieveDataRequest)(nil),    // 2: pluginapi.v1.RetrieveDataRequest
	(*RetrieveDataResponse)(nil),   // 3: pluginapi.v1.RetrieveDataResponse
	(*ProvideContentRequest)(nil),  // 4: pluginapi.v1.ProvideContentRequest
	(*ProvideContentResponse)(nil), // 5: pluginapi.v1.ProvideContentResponse
	(*PublisherInfoRequest)(nil),   // 6: pluginapi.v1.PublisherInfoRequest
	(*NodeSupportInfo)(nil),        // 7: pluginapi.v1.NodeSupportInfo
	(*PublisherInfoResponse)(nil),  // 8: pluginapi.v1.PublisherInfoResponse
	(*RenderNodeRequest)(nil),      // 9: pluginapi.v1.RenderNodeRequest
	(*RenderNodeResponse)(nil),     // 10: pluginapi.v1.RenderNodeResponse
	(*PublishRequest)(nil),         // 11: pluginapi.v1.PublishRequest
	(*PublishResponse)(nil),        // 12: pluginapi.v1.PublishResponse
	(*Schema)(nil),                 // 13: pluginapi.v1.Schema
	(*Block)(nil),                  // 14: pluginapi.v1.Block
	(*Data)(nil),                   // 15: pluginapi.v1.Data
	(*Diagnostic)(nil),             // 16: pluginapi.v1.Diagnostic
	(*MapData)(nil),                // 17: pluginapi.v1.MapData
	(*v1.Node)(nil),                // 18: ast.v1.Node
	(*v1.Path)(nil),                // 19: ast.v1.Path
}
var file_pluginapi_v1_plugin_proto_depIdxs = []int32{
	13, // 0: pluginapi.v1.GetSchemaResponse.schema:type_name -> pluginapi.v1.Schema
	14, // 1: pluginapi.v1.RetrieveDataRequest.args:type_name -> pluginapi.v1.Block
	14, // 2: pluginapi.v1.RetrieveDataRequest.config:type_name -> pluginapi.v1.Block
	15, // 3: pluginapi.v1.RetrieveDataResponse.data:type_name -> pluginapi.v1.Data
	16, // 4: pluginapi.v1.RetrieveDataResponse.diagnostics:type_name -> pluginapi.v1.Diagnostic
	14, // 5: pluginapi.v1.ProvideContentRequest.args:type_name -> pluginapi.v1.Block
	14, // 6: pluginapi.v1.ProvideContentRequest.config:type_name -> pluginapi.v1.Block
	17, // 7: pluginapi.v1.ProvideContentRequest.data_context:type_name -> pluginapi.v1.MapData
	18, // 8: pluginapi.v1.ProvideContentResponse.result:type_name -> ast.v1.Node
	16, // 9: pluginapi.v1.ProvideContentResponse.diagnostics:type_name -> pluginapi.v1.Diagnostic
	14, // 10: pluginapi.v1.PublisherInfoRequest.args:type_name -> pluginapi.v1.Block
	14, // 11: pluginapi.v1.PublisherInfoRequest.config:type_name -> pluginapi.v1.Block
	7,  // 12: pluginapi.v1.PublisherInfoResponse.publisher_info:type_name -> pluginapi.v1.NodeSupportInfo
	16, // 13: pluginapi.v1.PublisherInfoResponse.diagnostics:type_name -> pluginapi.v1.Diagnostic
	18, // 14: pluginapi.v1.RenderNodeRequest.subtree:type_name -> ast.v1.Node
	19, // 15: pluginapi.v1.RenderNodeRequest.node_path:type_name -> ast.v1.Path
	7,  // 16: pluginapi.v1.RenderNodeRequest.publisher_info:type_name -> pluginapi.v1.NodeSupportInfo
	18, // 17: pluginapi.v1.RenderNodeResponse.subtree_replacement:type_name -> ast.v1.Node
	16, // 18: pluginapi.v1.RenderNodeResponse.diagnostics:type_name -> pluginapi.v1.Diagnostic
	14, // 19: pluginapi.v1.PublishRequest.args:type_name -> pluginapi.v1.Block
	14, // 20: pluginapi.v1.PublishRequest.config:type_name -> pluginapi.v1.Block
	17, // 21: pluginapi.v1.PublishRequest.data_context:type_name -> pluginapi.v1.MapData
	18, // 22: pluginapi.v1.PublishRequest.document:type_name -> ast.v1.Node
	16, // 23: pluginapi.v1.PublishResponse.diagnostics:type_name -> pluginapi.v1.Diagnostic
	0,  // 24: pluginapi.v1.PluginService.GetSchema:input_type -> pluginapi.v1.GetSchemaRequest
	2,  // 25: pluginapi.v1.PluginService.RetrieveData:input_type -> pluginapi.v1.RetrieveDataRequest
	4,  // 26: pluginapi.v1.PluginService.ProvideContent:input_type -> pluginapi.v1.ProvideContentRequest
	6,  // 27: pluginapi.v1.PluginService.PublisherInfo:input_type -> pluginapi.v1.PublisherInfoRequest
	9,  // 28: pluginapi.v1.PluginService.RenderNode:input_type -> pluginapi.v1.RenderNodeRequest
	11, // 29: pluginapi.v1.PluginService.Publish:input_type -> pluginapi.v1.PublishRequest
	1,  // 30: pluginapi.v1.PluginService.GetSchema:output_type -> pluginapi.v1.GetSchemaResponse
	3,  // 31: pluginapi.v1.PluginService.RetrieveData:output_type -> pluginapi.v1.RetrieveDataResponse
	5,  // 32: pluginapi.v1.PluginService.ProvideContent:output_type -> pluginapi.v1.ProvideContentResponse
	8,  // 33: pluginapi.v1.PluginService.PublisherInfo:output_type -> pluginapi.v1.PublisherInfoResponse
	10, // 34: pluginapi.v1.PluginService.RenderNode:output_type -> pluginapi.v1.RenderNodeResponse
	12, // 35: pluginapi.v1.PluginService.Publish:output_type -> pluginapi.v1.PublishResponse
	30, // [30:36] is the sub-list for method output_type
	24, // [24:30] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pluginapi_v1_plugin_proto_init() }
func file_pluginapi_v1_plugin_proto_init() {
	if File_pluginapi_v1_plugin_proto != nil {
		return
	}
	file_pluginapi_v1_data_proto_init()
	file_pluginapi_v1_hcl_proto_init()
	file_pluginapi_v1_schema_proto_init()
	file_pluginapi_v1_dataspec_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pluginapi_v1_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pluginapi_v1_plugin_proto_goTypes,
		DependencyIndexes: file_pluginapi_v1_plugin_proto_depIdxs,
		MessageInfos:      file_pluginapi_v1_plugin_proto_msgTypes,
	}.Build()
	File_pluginapi_v1_plugin_proto = out.File
	file_pluginapi_v1_plugin_proto_rawDesc = nil
	file_pluginapi_v1_plugin_proto_goTypes = nil
	file_pluginapi_v1_plugin_proto_depIdxs = nil
}
