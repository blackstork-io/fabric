// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: ast/v1/ast.proto

package astv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTMLBlockType int32

const (
	HTMLBlockType_HTML_BLOCK_TYPE_UNSPECIFIED HTMLBlockType = 0
	HTMLBlockType_HTML_BLOCK_TYPE_1           HTMLBlockType = 1
	HTMLBlockType_HTML_BLOCK_TYPE_2           HTMLBlockType = 2
	HTMLBlockType_HTML_BLOCK_TYPE_3           HTMLBlockType = 3
	HTMLBlockType_HTML_BLOCK_TYPE_4           HTMLBlockType = 4
	HTMLBlockType_HTML_BLOCK_TYPE_5           HTMLBlockType = 5
	HTMLBlockType_HTML_BLOCK_TYPE_6           HTMLBlockType = 6
	HTMLBlockType_HTML_BLOCK_TYPE_7           HTMLBlockType = 7
)

// Enum value maps for HTMLBlockType.
var (
	HTMLBlockType_name = map[int32]string{
		0: "HTML_BLOCK_TYPE_UNSPECIFIED",
		1: "HTML_BLOCK_TYPE_1",
		2: "HTML_BLOCK_TYPE_2",
		3: "HTML_BLOCK_TYPE_3",
		4: "HTML_BLOCK_TYPE_4",
		5: "HTML_BLOCK_TYPE_5",
		6: "HTML_BLOCK_TYPE_6",
		7: "HTML_BLOCK_TYPE_7",
	}
	HTMLBlockType_value = map[string]int32{
		"HTML_BLOCK_TYPE_UNSPECIFIED": 0,
		"HTML_BLOCK_TYPE_1":           1,
		"HTML_BLOCK_TYPE_2":           2,
		"HTML_BLOCK_TYPE_3":           3,
		"HTML_BLOCK_TYPE_4":           4,
		"HTML_BLOCK_TYPE_5":           5,
		"HTML_BLOCK_TYPE_6":           6,
		"HTML_BLOCK_TYPE_7":           7,
	}
)

func (x HTMLBlockType) Enum() *HTMLBlockType {
	p := new(HTMLBlockType)
	*p = x
	return p
}

func (x HTMLBlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTMLBlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_v1_ast_proto_enumTypes[0].Descriptor()
}

func (HTMLBlockType) Type() protoreflect.EnumType {
	return &file_ast_v1_ast_proto_enumTypes[0]
}

func (x HTMLBlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTMLBlockType.Descriptor instead.
func (HTMLBlockType) EnumDescriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{0}
}

type AutoLinkType int32

const (
	AutoLinkType_AUTO_LINK_TYPE_UNSPECIFIED AutoLinkType = 0
	AutoLinkType_AUTO_LINK_TYPE_EMAIL       AutoLinkType = 1
	AutoLinkType_AUTO_LINK_TYPE_URL         AutoLinkType = 2
)

// Enum value maps for AutoLinkType.
var (
	AutoLinkType_name = map[int32]string{
		0: "AUTO_LINK_TYPE_UNSPECIFIED",
		1: "AUTO_LINK_TYPE_EMAIL",
		2: "AUTO_LINK_TYPE_URL",
	}
	AutoLinkType_value = map[string]int32{
		"AUTO_LINK_TYPE_UNSPECIFIED": 0,
		"AUTO_LINK_TYPE_EMAIL":       1,
		"AUTO_LINK_TYPE_URL":         2,
	}
)

func (x AutoLinkType) Enum() *AutoLinkType {
	p := new(AutoLinkType)
	*p = x
	return p
}

func (x AutoLinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoLinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_v1_ast_proto_enumTypes[1].Descriptor()
}

func (AutoLinkType) Type() protoreflect.EnumType {
	return &file_ast_v1_ast_proto_enumTypes[1]
}

func (x AutoLinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoLinkType.Descriptor instead.
func (AutoLinkType) EnumDescriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{1}
}

type CellAlignment int32

const (
	CellAlignment_CELL_ALIGNMENT_UNSPECIFIED CellAlignment = 0
	CellAlignment_CELL_ALIGNMENT_LEFT        CellAlignment = 1
	CellAlignment_CELL_ALIGNMENT_RIGHT       CellAlignment = 2
	CellAlignment_CELL_ALIGNMENT_CENTER      CellAlignment = 3
	CellAlignment_CELL_ALIGNMENT_NONE        CellAlignment = 4
)

// Enum value maps for CellAlignment.
var (
	CellAlignment_name = map[int32]string{
		0: "CELL_ALIGNMENT_UNSPECIFIED",
		1: "CELL_ALIGNMENT_LEFT",
		2: "CELL_ALIGNMENT_RIGHT",
		3: "CELL_ALIGNMENT_CENTER",
		4: "CELL_ALIGNMENT_NONE",
	}
	CellAlignment_value = map[string]int32{
		"CELL_ALIGNMENT_UNSPECIFIED": 0,
		"CELL_ALIGNMENT_LEFT":        1,
		"CELL_ALIGNMENT_RIGHT":       2,
		"CELL_ALIGNMENT_CENTER":      3,
		"CELL_ALIGNMENT_NONE":        4,
	}
)

func (x CellAlignment) Enum() *CellAlignment {
	p := new(CellAlignment)
	*p = x
	return p
}

func (x CellAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_v1_ast_proto_enumTypes[2].Descriptor()
}

func (CellAlignment) Type() protoreflect.EnumType {
	return &file_ast_v1_ast_proto_enumTypes[2]
}

func (x CellAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellAlignment.Descriptor instead.
func (CellAlignment) EnumDescriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{2}
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Attribute_Bytes
	//	*Attribute_Str
	Value isAttribute_Value `protobuf_oneof:"value"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	mi := &file_ast_v1_ast_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{0}
}

func (x *Attribute) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *Attribute) GetValue() isAttribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Attribute) GetBytes() []byte {
	if x, ok := x.GetValue().(*Attribute_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Attribute) GetStr() string {
	if x, ok := x.GetValue().(*Attribute_Str); ok {
		return x.Str
	}
	return ""
}

type isAttribute_Value interface {
	isAttribute_Value()
}

type Attribute_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

type Attribute_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

func (*Attribute_Bytes) isAttribute_Value() {}

func (*Attribute_Str) isAttribute_Value() {}

type BaseNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children   []*Node      `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// value meaningful only for blocks
	BlankPreviousLines bool `protobuf:"varint,3,opt,name=blank_previous_lines,json=blankPreviousLines,proto3" json:"blank_previous_lines,omitempty"`
}

func (x *BaseNode) Reset() {
	*x = BaseNode{}
	mi := &file_ast_v1_ast_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseNode) ProtoMessage() {}

func (x *BaseNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseNode.ProtoReflect.Descriptor instead.
func (*BaseNode) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{1}
}

func (x *BaseNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *BaseNode) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *BaseNode) GetBlankPreviousLines() bool {
	if x != nil {
		return x.BlankPreviousLines
	}
	return false
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Node_Document
	//	*Node_TextBlock
	//	*Node_Paragraph
	//	*Node_Heading
	//	*Node_ThematicBreak
	//	*Node_CodeBlock
	//	*Node_FencedCodeBlock
	//	*Node_Blockquote
	//	*Node_List
	//	*Node_ListItem
	//	*Node_HtmlBlock
	//	*Node_Text
	//	*Node_String_
	//	*Node_CodeSpan
	//	*Node_Emphasis
	//	*Node_LinkOrImage
	//	*Node_AutoLink
	//	*Node_RawHtml
	//	*Node_Table
	//	*Node_TableRow
	//	*Node_TableCell
	//	*Node_TaskCheckbox
	//	*Node_Strikethrough
	//	*Node_ContentNode
	//	*Node_Custom
	Kind isNode_Kind `protobuf_oneof:"kind"`
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_ast_v1_ast_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{2}
}

func (m *Node) GetKind() isNode_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Node) GetDocument() *Document {
	if x, ok := x.GetKind().(*Node_Document); ok {
		return x.Document
	}
	return nil
}

func (x *Node) GetTextBlock() *TextBlock {
	if x, ok := x.GetKind().(*Node_TextBlock); ok {
		return x.TextBlock
	}
	return nil
}

func (x *Node) GetParagraph() *Paragraph {
	if x, ok := x.GetKind().(*Node_Paragraph); ok {
		return x.Paragraph
	}
	return nil
}

func (x *Node) GetHeading() *Heading {
	if x, ok := x.GetKind().(*Node_Heading); ok {
		return x.Heading
	}
	return nil
}

func (x *Node) GetThematicBreak() *ThematicBreak {
	if x, ok := x.GetKind().(*Node_ThematicBreak); ok {
		return x.ThematicBreak
	}
	return nil
}

func (x *Node) GetCodeBlock() *CodeBlock {
	if x, ok := x.GetKind().(*Node_CodeBlock); ok {
		return x.CodeBlock
	}
	return nil
}

func (x *Node) GetFencedCodeBlock() *FencedCodeBlock {
	if x, ok := x.GetKind().(*Node_FencedCodeBlock); ok {
		return x.FencedCodeBlock
	}
	return nil
}

func (x *Node) GetBlockquote() *Blockquote {
	if x, ok := x.GetKind().(*Node_Blockquote); ok {
		return x.Blockquote
	}
	return nil
}

func (x *Node) GetList() *List {
	if x, ok := x.GetKind().(*Node_List); ok {
		return x.List
	}
	return nil
}

func (x *Node) GetListItem() *ListItem {
	if x, ok := x.GetKind().(*Node_ListItem); ok {
		return x.ListItem
	}
	return nil
}

func (x *Node) GetHtmlBlock() *HTMLBlock {
	if x, ok := x.GetKind().(*Node_HtmlBlock); ok {
		return x.HtmlBlock
	}
	return nil
}

func (x *Node) GetText() *Text {
	if x, ok := x.GetKind().(*Node_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Node) GetString_() *String {
	if x, ok := x.GetKind().(*Node_String_); ok {
		return x.String_
	}
	return nil
}

func (x *Node) GetCodeSpan() *CodeSpan {
	if x, ok := x.GetKind().(*Node_CodeSpan); ok {
		return x.CodeSpan
	}
	return nil
}

func (x *Node) GetEmphasis() *Emphasis {
	if x, ok := x.GetKind().(*Node_Emphasis); ok {
		return x.Emphasis
	}
	return nil
}

func (x *Node) GetLinkOrImage() *LinkOrImage {
	if x, ok := x.GetKind().(*Node_LinkOrImage); ok {
		return x.LinkOrImage
	}
	return nil
}

func (x *Node) GetAutoLink() *AutoLink {
	if x, ok := x.GetKind().(*Node_AutoLink); ok {
		return x.AutoLink
	}
	return nil
}

func (x *Node) GetRawHtml() *RawHTML {
	if x, ok := x.GetKind().(*Node_RawHtml); ok {
		return x.RawHtml
	}
	return nil
}

func (x *Node) GetTable() *Table {
	if x, ok := x.GetKind().(*Node_Table); ok {
		return x.Table
	}
	return nil
}

func (x *Node) GetTableRow() *TableRow {
	if x, ok := x.GetKind().(*Node_TableRow); ok {
		return x.TableRow
	}
	return nil
}

func (x *Node) GetTableCell() *TableCell {
	if x, ok := x.GetKind().(*Node_TableCell); ok {
		return x.TableCell
	}
	return nil
}

func (x *Node) GetTaskCheckbox() *TaskCheckbox {
	if x, ok := x.GetKind().(*Node_TaskCheckbox); ok {
		return x.TaskCheckbox
	}
	return nil
}

func (x *Node) GetStrikethrough() *Strikethrough {
	if x, ok := x.GetKind().(*Node_Strikethrough); ok {
		return x.Strikethrough
	}
	return nil
}

func (x *Node) GetContentNode() *FabricContentNode {
	if x, ok := x.GetKind().(*Node_ContentNode); ok {
		return x.ContentNode
	}
	return nil
}

func (x *Node) GetCustom() *CustomNode {
	if x, ok := x.GetKind().(*Node_Custom); ok {
		return x.Custom
	}
	return nil
}

type isNode_Kind interface {
	isNode_Kind()
}

type Node_Document struct {
	// Blocks
	Document *Document `protobuf:"bytes,1,opt,name=document,proto3,oneof"`
}

type Node_TextBlock struct {
	TextBlock *TextBlock `protobuf:"bytes,5,opt,name=text_block,json=textBlock,proto3,oneof"`
}

type Node_Paragraph struct {
	Paragraph *Paragraph `protobuf:"bytes,6,opt,name=paragraph,proto3,oneof"`
}

type Node_Heading struct {
	Heading *Heading `protobuf:"bytes,7,opt,name=heading,proto3,oneof"`
}

type Node_ThematicBreak struct {
	ThematicBreak *ThematicBreak `protobuf:"bytes,8,opt,name=thematic_break,json=thematicBreak,proto3,oneof"`
}

type Node_CodeBlock struct {
	CodeBlock *CodeBlock `protobuf:"bytes,9,opt,name=code_block,json=codeBlock,proto3,oneof"`
}

type Node_FencedCodeBlock struct {
	FencedCodeBlock *FencedCodeBlock `protobuf:"bytes,10,opt,name=fenced_code_block,json=fencedCodeBlock,proto3,oneof"`
}

type Node_Blockquote struct {
	Blockquote *Blockquote `protobuf:"bytes,11,opt,name=blockquote,proto3,oneof"`
}

type Node_List struct {
	List *List `protobuf:"bytes,12,opt,name=list,proto3,oneof"`
}

type Node_ListItem struct {
	ListItem *ListItem `protobuf:"bytes,13,opt,name=list_item,json=listItem,proto3,oneof"`
}

type Node_HtmlBlock struct {
	HtmlBlock *HTMLBlock `protobuf:"bytes,14,opt,name=html_block,json=htmlBlock,proto3,oneof"`
}

type Node_Text struct {
	// inlines
	Text *Text `protobuf:"bytes,15,opt,name=text,proto3,oneof"`
}

type Node_String_ struct {
	String_ *String `protobuf:"bytes,16,opt,name=string,proto3,oneof"`
}

type Node_CodeSpan struct {
	CodeSpan *CodeSpan `protobuf:"bytes,17,opt,name=code_span,json=codeSpan,proto3,oneof"`
}

type Node_Emphasis struct {
	Emphasis *Emphasis `protobuf:"bytes,18,opt,name=emphasis,proto3,oneof"`
}

type Node_LinkOrImage struct {
	LinkOrImage *LinkOrImage `protobuf:"bytes,19,opt,name=link_or_image,json=linkOrImage,proto3,oneof"`
}

type Node_AutoLink struct {
	AutoLink *AutoLink `protobuf:"bytes,20,opt,name=auto_link,json=autoLink,proto3,oneof"`
}

type Node_RawHtml struct {
	RawHtml *RawHTML `protobuf:"bytes,21,opt,name=raw_html,json=rawHtml,proto3,oneof"`
}

type Node_Table struct {
	// Github Flavored Markdown
	// blocks
	Table *Table `protobuf:"bytes,22,opt,name=table,proto3,oneof"`
}

type Node_TableRow struct {
	TableRow *TableRow `protobuf:"bytes,23,opt,name=table_row,json=tableRow,proto3,oneof"`
}

type Node_TableCell struct {
	TableCell *TableCell `protobuf:"bytes,24,opt,name=table_cell,json=tableCell,proto3,oneof"`
}

type Node_TaskCheckbox struct {
	// inline
	TaskCheckbox *TaskCheckbox `protobuf:"bytes,25,opt,name=task_checkbox,json=taskCheckbox,proto3,oneof"`
}

type Node_Strikethrough struct {
	Strikethrough *Strikethrough `protobuf:"bytes,26,opt,name=strikethrough,proto3,oneof"`
}

type Node_ContentNode struct {
	// Root of the plugin-rendered data
	ContentNode *FabricContentNode `protobuf:"bytes,254,opt,name=content_node,json=contentNode,proto3,oneof"`
}

type Node_Custom struct {
	// Custom node types can be serialized using this
	Custom *CustomNode `protobuf:"bytes,255,opt,name=custom,proto3,oneof"`
}

func (*Node_Document) isNode_Kind() {}

func (*Node_TextBlock) isNode_Kind() {}

func (*Node_Paragraph) isNode_Kind() {}

func (*Node_Heading) isNode_Kind() {}

func (*Node_ThematicBreak) isNode_Kind() {}

func (*Node_CodeBlock) isNode_Kind() {}

func (*Node_FencedCodeBlock) isNode_Kind() {}

func (*Node_Blockquote) isNode_Kind() {}

func (*Node_List) isNode_Kind() {}

func (*Node_ListItem) isNode_Kind() {}

func (*Node_HtmlBlock) isNode_Kind() {}

func (*Node_Text) isNode_Kind() {}

func (*Node_String_) isNode_Kind() {}

func (*Node_CodeSpan) isNode_Kind() {}

func (*Node_Emphasis) isNode_Kind() {}

func (*Node_LinkOrImage) isNode_Kind() {}

func (*Node_AutoLink) isNode_Kind() {}

func (*Node_RawHtml) isNode_Kind() {}

func (*Node_Table) isNode_Kind() {}

func (*Node_TableRow) isNode_Kind() {}

func (*Node_TableCell) isNode_Kind() {}

func (*Node_TaskCheckbox) isNode_Kind() {}

func (*Node_Strikethrough) isNode_Kind() {}

func (*Node_ContentNode) isNode_Kind() {}

func (*Node_Custom) isNode_Kind() {}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_ast_v1_ast_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{3}
}

func (x *Document) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type TextBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *TextBlock) Reset() {
	*x = TextBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextBlock) ProtoMessage() {}

func (x *TextBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextBlock.ProtoReflect.Descriptor instead.
func (*TextBlock) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{4}
}

func (x *TextBlock) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type Paragraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	mi := &file_ast_v1_ast_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraph.ProtoReflect.Descriptor instead.
func (*Paragraph) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{5}
}

func (x *Paragraph) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type Heading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Level uint32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Heading) Reset() {
	*x = Heading{}
	mi := &file_ast_v1_ast_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heading) ProtoMessage() {}

func (x *Heading) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heading.ProtoReflect.Descriptor instead.
func (*Heading) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{6}
}

func (x *Heading) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Heading) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ThematicBreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *ThematicBreak) Reset() {
	*x = ThematicBreak{}
	mi := &file_ast_v1_ast_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThematicBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThematicBreak) ProtoMessage() {}

func (x *ThematicBreak) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThematicBreak.ProtoReflect.Descriptor instead.
func (*ThematicBreak) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{7}
}

func (x *ThematicBreak) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type CodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Lines [][]byte  `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{8}
}

func (x *CodeBlock) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CodeBlock) GetLines() [][]byte {
	if x != nil {
		return x.Lines
	}
	return nil
}

type FencedCodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Info  *Text     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Lines [][]byte  `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *FencedCodeBlock) Reset() {
	*x = FencedCodeBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FencedCodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FencedCodeBlock) ProtoMessage() {}

func (x *FencedCodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FencedCodeBlock.ProtoReflect.Descriptor instead.
func (*FencedCodeBlock) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{9}
}

func (x *FencedCodeBlock) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FencedCodeBlock) GetInfo() *Text {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FencedCodeBlock) GetLines() [][]byte {
	if x != nil {
		return x.Lines
	}
	return nil
}

type Blockquote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *Blockquote) Reset() {
	*x = Blockquote{}
	mi := &file_ast_v1_ast_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blockquote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blockquote) ProtoMessage() {}

func (x *Blockquote) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blockquote.ProtoReflect.Descriptor instead.
func (*Blockquote) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{10}
}

func (x *Blockquote) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Marker  uint32    `protobuf:"varint,2,opt,name=marker,proto3" json:"marker,omitempty"`
	IsTight bool      `protobuf:"varint,3,opt,name=is_tight,json=isTight,proto3" json:"is_tight,omitempty"`
	Start   uint32    `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	mi := &file_ast_v1_ast_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{11}
}

func (x *List) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *List) GetMarker() uint32 {
	if x != nil {
		return x.Marker
	}
	return 0
}

func (x *List) GetIsTight() bool {
	if x != nil {
		return x.IsTight
	}
	return false
}

func (x *List) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Offset int64     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListItem) Reset() {
	*x = ListItem{}
	mi := &file_ast_v1_ast_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListItem) ProtoMessage() {}

func (x *ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListItem.ProtoReflect.Descriptor instead.
func (*ListItem) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{12}
}

func (x *ListItem) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ListItem) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type HTMLBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *BaseNode     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Type        HTMLBlockType `protobuf:"varint,2,opt,name=type,proto3,enum=ast.v1.HTMLBlockType" json:"type,omitempty"`
	Lines       [][]byte      `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	ClosureLine []byte        `protobuf:"bytes,4,opt,name=closure_line,json=closureLine,proto3" json:"closure_line,omitempty"`
}

func (x *HTMLBlock) Reset() {
	*x = HTMLBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTMLBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLBlock) ProtoMessage() {}

func (x *HTMLBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTMLBlock.ProtoReflect.Descriptor instead.
func (*HTMLBlock) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{13}
}

func (x *HTMLBlock) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *HTMLBlock) GetType() HTMLBlockType {
	if x != nil {
		return x.Type
	}
	return HTMLBlockType_HTML_BLOCK_TYPE_UNSPECIFIED
}

func (x *HTMLBlock) GetLines() [][]byte {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *HTMLBlock) GetClosureLine() []byte {
	if x != nil {
		return x.ClosureLine
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base          *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Segment       []byte    `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
	SoftLineBreak bool      `protobuf:"varint,3,opt,name=soft_line_break,json=softLineBreak,proto3" json:"soft_line_break,omitempty"`
	HardLineBreak bool      `protobuf:"varint,4,opt,name=hard_line_break,json=hardLineBreak,proto3" json:"hard_line_break,omitempty"`
	Raw           bool      `protobuf:"varint,5,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_ast_v1_ast_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{14}
}

func (x *Text) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Text) GetSegment() []byte {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *Text) GetSoftLineBreak() bool {
	if x != nil {
		return x.SoftLineBreak
	}
	return false
}

func (x *Text) GetHardLineBreak() bool {
	if x != nil {
		return x.HardLineBreak
	}
	return false
}

func (x *Text) GetRaw() bool {
	if x != nil {
		return x.Raw
	}
	return false
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Value []byte    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Raw   bool      `protobuf:"varint,3,opt,name=raw,proto3" json:"raw,omitempty"`
	Code  bool      `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	mi := &file_ast_v1_ast_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{15}
}

func (x *String) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *String) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *String) GetRaw() bool {
	if x != nil {
		return x.Raw
	}
	return false
}

func (x *String) GetCode() bool {
	if x != nil {
		return x.Code
	}
	return false
}

type CodeSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *CodeSpan) Reset() {
	*x = CodeSpan{}
	mi := &file_ast_v1_ast_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSpan) ProtoMessage() {}

func (x *CodeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSpan.ProtoReflect.Descriptor instead.
func (*CodeSpan) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{16}
}

func (x *CodeSpan) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type Emphasis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Level int64     `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Emphasis) Reset() {
	*x = Emphasis{}
	mi := &file_ast_v1_ast_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Emphasis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emphasis) ProtoMessage() {}

func (x *Emphasis) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emphasis.ProtoReflect.Descriptor instead.
func (*Emphasis) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{17}
}

func (x *Emphasis) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Emphasis) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type LinkOrImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Destination []byte    `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Title       []byte    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	IsImage     bool      `protobuf:"varint,4,opt,name=is_image,json=isImage,proto3" json:"is_image,omitempty"`
}

func (x *LinkOrImage) Reset() {
	*x = LinkOrImage{}
	mi := &file_ast_v1_ast_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkOrImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkOrImage) ProtoMessage() {}

func (x *LinkOrImage) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkOrImage.ProtoReflect.Descriptor instead.
func (*LinkOrImage) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{18}
}

func (x *LinkOrImage) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LinkOrImage) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *LinkOrImage) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *LinkOrImage) GetIsImage() bool {
	if x != nil {
		return x.IsImage
	}
	return false
}

type AutoLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseNode    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Type     AutoLinkType `protobuf:"varint,2,opt,name=type,proto3,enum=ast.v1.AutoLinkType" json:"type,omitempty"`
	Protocol []byte       `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Value    []byte       `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AutoLink) Reset() {
	*x = AutoLink{}
	mi := &file_ast_v1_ast_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLink) ProtoMessage() {}

func (x *AutoLink) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoLink.ProtoReflect.Descriptor instead.
func (*AutoLink) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{19}
}

func (x *AutoLink) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AutoLink) GetType() AutoLinkType {
	if x != nil {
		return x.Type
	}
	return AutoLinkType_AUTO_LINK_TYPE_UNSPECIFIED
}

func (x *AutoLink) GetProtocol() []byte {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *AutoLink) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type RawHTML struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Segments [][]byte  `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *RawHTML) Reset() {
	*x = RawHTML{}
	mi := &file_ast_v1_ast_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawHTML) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawHTML) ProtoMessage() {}

func (x *RawHTML) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawHTML.ProtoReflect.Descriptor instead.
func (*RawHTML) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{20}
}

func (x *RawHTML) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RawHTML) GetSegments() [][]byte {
	if x != nil {
		return x.Segments
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseNode       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Alignments []CellAlignment `protobuf:"varint,2,rep,packed,name=alignments,proto3,enum=ast.v1.CellAlignment" json:"alignments,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_ast_v1_ast_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{21}
}

func (x *Table) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Table) GetAlignments() []CellAlignment {
	if x != nil {
		return x.Alignments
	}
	return nil
}

type TableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseNode       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Alignments []CellAlignment `protobuf:"varint,2,rep,packed,name=alignments,proto3,enum=ast.v1.CellAlignment" json:"alignments,omitempty"`
	IsHeader   bool            `protobuf:"varint,4,opt,name=is_header,json=isHeader,proto3" json:"is_header,omitempty"`
}

func (x *TableRow) Reset() {
	*x = TableRow{}
	mi := &file_ast_v1_ast_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRow) ProtoMessage() {}

func (x *TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRow.ProtoReflect.Descriptor instead.
func (*TableRow) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{22}
}

func (x *TableRow) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TableRow) GetAlignments() []CellAlignment {
	if x != nil {
		return x.Alignments
	}
	return nil
}

func (x *TableRow) GetIsHeader() bool {
	if x != nil {
		return x.IsHeader
	}
	return false
}

type TableCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseNode     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Alignment CellAlignment `protobuf:"varint,2,opt,name=alignment,proto3,enum=ast.v1.CellAlignment" json:"alignment,omitempty"`
}

func (x *TableCell) Reset() {
	*x = TableCell{}
	mi := &file_ast_v1_ast_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCell) ProtoMessage() {}

func (x *TableCell) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCell.ProtoReflect.Descriptor instead.
func (*TableCell) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{23}
}

func (x *TableCell) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TableCell) GetAlignment() CellAlignment {
	if x != nil {
		return x.Alignment
	}
	return CellAlignment_CELL_ALIGNMENT_UNSPECIFIED
}

type TaskCheckbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	IsChecked bool      `protobuf:"varint,2,opt,name=is_checked,json=isChecked,proto3" json:"is_checked,omitempty"`
}

func (x *TaskCheckbox) Reset() {
	*x = TaskCheckbox{}
	mi := &file_ast_v1_ast_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCheckbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckbox) ProtoMessage() {}

func (x *TaskCheckbox) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckbox.ProtoReflect.Descriptor instead.
func (*TaskCheckbox) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{24}
}

func (x *TaskCheckbox) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TaskCheckbox) GetIsChecked() bool {
	if x != nil {
		return x.IsChecked
	}
	return false
}

type Strikethrough struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseNode `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *Strikethrough) Reset() {
	*x = Strikethrough{}
	mi := &file_ast_v1_ast_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Strikethrough) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strikethrough) ProtoMessage() {}

func (x *Strikethrough) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strikethrough.ProtoReflect.Descriptor instead.
func (*Strikethrough) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{25}
}

func (x *Strikethrough) GetBase() *BaseNode {
	if x != nil {
		return x.Base
	}
	return nil
}

type CustomNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates that this block is an inline element
	IsInline           bool       `protobuf:"varint,1,opt,name=is_inline,json=isInline,proto3" json:"is_inline,omitempty"`
	Data               *anypb.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	BlankPreviousLines bool       `protobuf:"varint,3,opt,name=blank_previous_lines,json=blankPreviousLines,proto3" json:"blank_previous_lines,omitempty"`
}

func (x *CustomNode) Reset() {
	*x = CustomNode{}
	mi := &file_ast_v1_ast_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomNode) ProtoMessage() {}

func (x *CustomNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomNode.ProtoReflect.Descriptor instead.
func (*CustomNode) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{26}
}

func (x *CustomNode) GetIsInline() bool {
	if x != nil {
		return x.IsInline
	}
	return false
}

func (x *CustomNode) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CustomNode) GetBlankPreviousLines() bool {
	if x != nil {
		return x.BlankPreviousLines
	}
	return false
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ie "blackstork/builtin"
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// ie "title"
	Plugin  string `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_ast_v1_ast_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{27}
}

func (x *Metadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Metadata) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Root of the plugin-rendered data
type FabricContentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Root     *BaseNode `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"` // direct content, no document node
}

func (x *FabricContentNode) Reset() {
	*x = FabricContentNode{}
	mi := &file_ast_v1_ast_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FabricContentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricContentNode) ProtoMessage() {}

func (x *FabricContentNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricContentNode.ProtoReflect.Descriptor instead.
func (*FabricContentNode) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{28}
}

func (x *FabricContentNode) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FabricContentNode) GetRoot() *BaseNode {
	if x != nil {
		return x.Root
	}
	return nil
}

var File_ast_v1_ast_proto protoreflect.FileDescriptor

var file_ast_v1_ast_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73,
	0x74, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x08,
	0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x8d, 0x0a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x11, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x34, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x74,
	0x6d, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x2e, 0x0a,
	0x08, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x12, 0x39, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x4f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x6e,
	0x6b, 0x4f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x61, 0x77,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x4d, 0x4c, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x62, 0x6f, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78,
	0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78,
	0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12,
	0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x09, 0x54, 0x65, 0x78,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x35, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x47, 0x0a,
	0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x0f, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x22, 0x48, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x95, 0x01, 0x0a,
	0x09, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22,
	0x6a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x08, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x46, 0x0a,
	0x08, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x8c,
	0x01, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a,
	0x07, 0x52, 0x61, 0x77, 0x48, 0x54, 0x4d, 0x4c, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x05, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x84, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x24, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x53, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12,
	0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a,
	0x11, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x2a, 0xd1, 0x01, 0x0a, 0x0d, 0x48, 0x54, 0x4d, 0x4c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x54, 0x4d, 0x4c,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x54, 0x4d,
	0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x54, 0x4d, 0x4c, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x36, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x37, 0x10, 0x07, 0x2a, 0x60, 0x0a, 0x0c, 0x41, 0x75,
	0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a,
	0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x04, 0x42, 0x84, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6f, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12,
	0x41, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ast_v1_ast_proto_rawDescOnce sync.Once
	file_ast_v1_ast_proto_rawDescData = file_ast_v1_ast_proto_rawDesc
)

func file_ast_v1_ast_proto_rawDescGZIP() []byte {
	file_ast_v1_ast_proto_rawDescOnce.Do(func() {
		file_ast_v1_ast_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_v1_ast_proto_rawDescData)
	})
	return file_ast_v1_ast_proto_rawDescData
}

var file_ast_v1_ast_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ast_v1_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_ast_v1_ast_proto_goTypes = []any{
	(HTMLBlockType)(0),        // 0: ast.v1.HTMLBlockType
	(AutoLinkType)(0),         // 1: ast.v1.AutoLinkType
	(CellAlignment)(0),        // 2: ast.v1.CellAlignment
	(*Attribute)(nil),         // 3: ast.v1.Attribute
	(*BaseNode)(nil),          // 4: ast.v1.BaseNode
	(*Node)(nil),              // 5: ast.v1.Node
	(*Document)(nil),          // 6: ast.v1.Document
	(*TextBlock)(nil),         // 7: ast.v1.TextBlock
	(*Paragraph)(nil),         // 8: ast.v1.Paragraph
	(*Heading)(nil),           // 9: ast.v1.Heading
	(*ThematicBreak)(nil),     // 10: ast.v1.ThematicBreak
	(*CodeBlock)(nil),         // 11: ast.v1.CodeBlock
	(*FencedCodeBlock)(nil),   // 12: ast.v1.FencedCodeBlock
	(*Blockquote)(nil),        // 13: ast.v1.Blockquote
	(*List)(nil),              // 14: ast.v1.List
	(*ListItem)(nil),          // 15: ast.v1.ListItem
	(*HTMLBlock)(nil),         // 16: ast.v1.HTMLBlock
	(*Text)(nil),              // 17: ast.v1.Text
	(*String)(nil),            // 18: ast.v1.String
	(*CodeSpan)(nil),          // 19: ast.v1.CodeSpan
	(*Emphasis)(nil),          // 20: ast.v1.Emphasis
	(*LinkOrImage)(nil),       // 21: ast.v1.LinkOrImage
	(*AutoLink)(nil),          // 22: ast.v1.AutoLink
	(*RawHTML)(nil),           // 23: ast.v1.RawHTML
	(*Table)(nil),             // 24: ast.v1.Table
	(*TableRow)(nil),          // 25: ast.v1.TableRow
	(*TableCell)(nil),         // 26: ast.v1.TableCell
	(*TaskCheckbox)(nil),      // 27: ast.v1.TaskCheckbox
	(*Strikethrough)(nil),     // 28: ast.v1.Strikethrough
	(*CustomNode)(nil),        // 29: ast.v1.CustomNode
	(*Metadata)(nil),          // 30: ast.v1.Metadata
	(*FabricContentNode)(nil), // 31: ast.v1.FabricContentNode
	(*anypb.Any)(nil),         // 32: google.protobuf.Any
}
var file_ast_v1_ast_proto_depIdxs = []int32{
	5,  // 0: ast.v1.BaseNode.children:type_name -> ast.v1.Node
	3,  // 1: ast.v1.BaseNode.attributes:type_name -> ast.v1.Attribute
	6,  // 2: ast.v1.Node.document:type_name -> ast.v1.Document
	7,  // 3: ast.v1.Node.text_block:type_name -> ast.v1.TextBlock
	8,  // 4: ast.v1.Node.paragraph:type_name -> ast.v1.Paragraph
	9,  // 5: ast.v1.Node.heading:type_name -> ast.v1.Heading
	10, // 6: ast.v1.Node.thematic_break:type_name -> ast.v1.ThematicBreak
	11, // 7: ast.v1.Node.code_block:type_name -> ast.v1.CodeBlock
	12, // 8: ast.v1.Node.fenced_code_block:type_name -> ast.v1.FencedCodeBlock
	13, // 9: ast.v1.Node.blockquote:type_name -> ast.v1.Blockquote
	14, // 10: ast.v1.Node.list:type_name -> ast.v1.List
	15, // 11: ast.v1.Node.list_item:type_name -> ast.v1.ListItem
	16, // 12: ast.v1.Node.html_block:type_name -> ast.v1.HTMLBlock
	17, // 13: ast.v1.Node.text:type_name -> ast.v1.Text
	18, // 14: ast.v1.Node.string:type_name -> ast.v1.String
	19, // 15: ast.v1.Node.code_span:type_name -> ast.v1.CodeSpan
	20, // 16: ast.v1.Node.emphasis:type_name -> ast.v1.Emphasis
	21, // 17: ast.v1.Node.link_or_image:type_name -> ast.v1.LinkOrImage
	22, // 18: ast.v1.Node.auto_link:type_name -> ast.v1.AutoLink
	23, // 19: ast.v1.Node.raw_html:type_name -> ast.v1.RawHTML
	24, // 20: ast.v1.Node.table:type_name -> ast.v1.Table
	25, // 21: ast.v1.Node.table_row:type_name -> ast.v1.TableRow
	26, // 22: ast.v1.Node.table_cell:type_name -> ast.v1.TableCell
	27, // 23: ast.v1.Node.task_checkbox:type_name -> ast.v1.TaskCheckbox
	28, // 24: ast.v1.Node.strikethrough:type_name -> ast.v1.Strikethrough
	31, // 25: ast.v1.Node.content_node:type_name -> ast.v1.FabricContentNode
	29, // 26: ast.v1.Node.custom:type_name -> ast.v1.CustomNode
	4,  // 27: ast.v1.Document.base:type_name -> ast.v1.BaseNode
	4,  // 28: ast.v1.TextBlock.base:type_name -> ast.v1.BaseNode
	4,  // 29: ast.v1.Paragraph.base:type_name -> ast.v1.BaseNode
	4,  // 30: ast.v1.Heading.base:type_name -> ast.v1.BaseNode
	4,  // 31: ast.v1.ThematicBreak.base:type_name -> ast.v1.BaseNode
	4,  // 32: ast.v1.CodeBlock.base:type_name -> ast.v1.BaseNode
	4,  // 33: ast.v1.FencedCodeBlock.base:type_name -> ast.v1.BaseNode
	17, // 34: ast.v1.FencedCodeBlock.info:type_name -> ast.v1.Text
	4,  // 35: ast.v1.Blockquote.base:type_name -> ast.v1.BaseNode
	4,  // 36: ast.v1.List.base:type_name -> ast.v1.BaseNode
	4,  // 37: ast.v1.ListItem.base:type_name -> ast.v1.BaseNode
	4,  // 38: ast.v1.HTMLBlock.base:type_name -> ast.v1.BaseNode
	0,  // 39: ast.v1.HTMLBlock.type:type_name -> ast.v1.HTMLBlockType
	4,  // 40: ast.v1.Text.base:type_name -> ast.v1.BaseNode
	4,  // 41: ast.v1.String.base:type_name -> ast.v1.BaseNode
	4,  // 42: ast.v1.CodeSpan.base:type_name -> ast.v1.BaseNode
	4,  // 43: ast.v1.Emphasis.base:type_name -> ast.v1.BaseNode
	4,  // 44: ast.v1.LinkOrImage.base:type_name -> ast.v1.BaseNode
	4,  // 45: ast.v1.AutoLink.base:type_name -> ast.v1.BaseNode
	1,  // 46: ast.v1.AutoLink.type:type_name -> ast.v1.AutoLinkType
	4,  // 47: ast.v1.RawHTML.base:type_name -> ast.v1.BaseNode
	4,  // 48: ast.v1.Table.base:type_name -> ast.v1.BaseNode
	2,  // 49: ast.v1.Table.alignments:type_name -> ast.v1.CellAlignment
	4,  // 50: ast.v1.TableRow.base:type_name -> ast.v1.BaseNode
	2,  // 51: ast.v1.TableRow.alignments:type_name -> ast.v1.CellAlignment
	4,  // 52: ast.v1.TableCell.base:type_name -> ast.v1.BaseNode
	2,  // 53: ast.v1.TableCell.alignment:type_name -> ast.v1.CellAlignment
	4,  // 54: ast.v1.TaskCheckbox.base:type_name -> ast.v1.BaseNode
	4,  // 55: ast.v1.Strikethrough.base:type_name -> ast.v1.BaseNode
	32, // 56: ast.v1.CustomNode.data:type_name -> google.protobuf.Any
	30, // 57: ast.v1.FabricContentNode.metadata:type_name -> ast.v1.Metadata
	4,  // 58: ast.v1.FabricContentNode.root:type_name -> ast.v1.BaseNode
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_ast_v1_ast_proto_init() }
func file_ast_v1_ast_proto_init() {
	if File_ast_v1_ast_proto != nil {
		return
	}
	file_ast_v1_ast_proto_msgTypes[0].OneofWrappers = []any{
		(*Attribute_Bytes)(nil),
		(*Attribute_Str)(nil),
	}
	file_ast_v1_ast_proto_msgTypes[2].OneofWrappers = []any{
		(*Node_Document)(nil),
		(*Node_TextBlock)(nil),
		(*Node_Paragraph)(nil),
		(*Node_Heading)(nil),
		(*Node_ThematicBreak)(nil),
		(*Node_CodeBlock)(nil),
		(*Node_FencedCodeBlock)(nil),
		(*Node_Blockquote)(nil),
		(*Node_List)(nil),
		(*Node_ListItem)(nil),
		(*Node_HtmlBlock)(nil),
		(*Node_Text)(nil),
		(*Node_String_)(nil),
		(*Node_CodeSpan)(nil),
		(*Node_Emphasis)(nil),
		(*Node_LinkOrImage)(nil),
		(*Node_AutoLink)(nil),
		(*Node_RawHtml)(nil),
		(*Node_Table)(nil),
		(*Node_TableRow)(nil),
		(*Node_TableCell)(nil),
		(*Node_TaskCheckbox)(nil),
		(*Node_Strikethrough)(nil),
		(*Node_ContentNode)(nil),
		(*Node_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_v1_ast_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_v1_ast_proto_goTypes,
		DependencyIndexes: file_ast_v1_ast_proto_depIdxs,
		EnumInfos:         file_ast_v1_ast_proto_enumTypes,
		MessageInfos:      file_ast_v1_ast_proto_msgTypes,
	}.Build()
	File_ast_v1_ast_proto = out.File
	file_ast_v1_ast_proto_rawDesc = nil
	file_ast_v1_ast_proto_goTypes = nil
	file_ast_v1_ast_proto_depIdxs = nil
}
