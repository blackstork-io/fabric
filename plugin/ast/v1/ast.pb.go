// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: ast/v1/ast.proto

package astv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellAlignment int32

const (
	CellAlignment_CELL_ALIGNMENT_UNSPECIFIED CellAlignment = 0
	CellAlignment_CELL_ALIGNMENT_LEFT        CellAlignment = 1
	CellAlignment_CELL_ALIGNMENT_CENTER      CellAlignment = 2
	CellAlignment_CELL_ALIGNMENT_RIGHT       CellAlignment = 3
)

// Enum value maps for CellAlignment.
var (
	CellAlignment_name = map[int32]string{
		0: "CELL_ALIGNMENT_UNSPECIFIED",
		1: "CELL_ALIGNMENT_LEFT",
		2: "CELL_ALIGNMENT_CENTER",
		3: "CELL_ALIGNMENT_RIGHT",
	}
	CellAlignment_value = map[string]int32{
		"CELL_ALIGNMENT_UNSPECIFIED": 0,
		"CELL_ALIGNMENT_LEFT":        1,
		"CELL_ALIGNMENT_CENTER":      2,
		"CELL_ALIGNMENT_RIGHT":       3,
	}
)

func (x CellAlignment) Enum() *CellAlignment {
	p := new(CellAlignment)
	*p = x
	return p
}

func (x CellAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_v1_ast_proto_enumTypes[0].Descriptor()
}

func (CellAlignment) Type() protoreflect.EnumType {
	return &file_ast_v1_ast_proto_enumTypes[0]
}

func (x CellAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellAlignment.Descriptor instead.
func (CellAlignment) EnumDescriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{0}
}

type Node struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Children []*Node                `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*Node_Document
	//	*Node_Paragraph
	//	*Node_Heading
	//	*Node_ThematicBreak
	//	*Node_CodeBlock
	//	*Node_Blockquote
	//	*Node_List
	//	*Node_ListItem
	//	*Node_HtmlBlock
	//	*Node_Text
	//	*Node_CodeSpan
	//	*Node_Emphasis
	//	*Node_Link
	//	*Node_Image
	//	*Node_AutoLink
	//	*Node_HtmlInline
	//	*Node_Table
	//	*Node_TableRow
	//	*Node_TableCell
	//	*Node_TaskCheckbox
	//	*Node_Strikethrough
	//	*Node_ContentNode
	//	*Node_Custom
	Content       isNode_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_ast_v1_ast_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Node) GetContent() isNode_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Node) GetDocument() *Document {
	if x != nil {
		if x, ok := x.Content.(*Node_Document); ok {
			return x.Document
		}
	}
	return nil
}

func (x *Node) GetParagraph() *Paragraph {
	if x != nil {
		if x, ok := x.Content.(*Node_Paragraph); ok {
			return x.Paragraph
		}
	}
	return nil
}

func (x *Node) GetHeading() *Heading {
	if x != nil {
		if x, ok := x.Content.(*Node_Heading); ok {
			return x.Heading
		}
	}
	return nil
}

func (x *Node) GetThematicBreak() *ThematicBreak {
	if x != nil {
		if x, ok := x.Content.(*Node_ThematicBreak); ok {
			return x.ThematicBreak
		}
	}
	return nil
}

func (x *Node) GetCodeBlock() *CodeBlock {
	if x != nil {
		if x, ok := x.Content.(*Node_CodeBlock); ok {
			return x.CodeBlock
		}
	}
	return nil
}

func (x *Node) GetBlockquote() *Blockquote {
	if x != nil {
		if x, ok := x.Content.(*Node_Blockquote); ok {
			return x.Blockquote
		}
	}
	return nil
}

func (x *Node) GetList() *List {
	if x != nil {
		if x, ok := x.Content.(*Node_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *Node) GetListItem() *ListItem {
	if x != nil {
		if x, ok := x.Content.(*Node_ListItem); ok {
			return x.ListItem
		}
	}
	return nil
}

func (x *Node) GetHtmlBlock() *HTMLBlock {
	if x != nil {
		if x, ok := x.Content.(*Node_HtmlBlock); ok {
			return x.HtmlBlock
		}
	}
	return nil
}

func (x *Node) GetText() *Text {
	if x != nil {
		if x, ok := x.Content.(*Node_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *Node) GetCodeSpan() *CodeSpan {
	if x != nil {
		if x, ok := x.Content.(*Node_CodeSpan); ok {
			return x.CodeSpan
		}
	}
	return nil
}

func (x *Node) GetEmphasis() *Emphasis {
	if x != nil {
		if x, ok := x.Content.(*Node_Emphasis); ok {
			return x.Emphasis
		}
	}
	return nil
}

func (x *Node) GetLink() *Link {
	if x != nil {
		if x, ok := x.Content.(*Node_Link); ok {
			return x.Link
		}
	}
	return nil
}

func (x *Node) GetImage() *Image {
	if x != nil {
		if x, ok := x.Content.(*Node_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *Node) GetAutoLink() *AutoLink {
	if x != nil {
		if x, ok := x.Content.(*Node_AutoLink); ok {
			return x.AutoLink
		}
	}
	return nil
}

func (x *Node) GetHtmlInline() *HTMLInline {
	if x != nil {
		if x, ok := x.Content.(*Node_HtmlInline); ok {
			return x.HtmlInline
		}
	}
	return nil
}

func (x *Node) GetTable() *Table {
	if x != nil {
		if x, ok := x.Content.(*Node_Table); ok {
			return x.Table
		}
	}
	return nil
}

func (x *Node) GetTableRow() *TableRow {
	if x != nil {
		if x, ok := x.Content.(*Node_TableRow); ok {
			return x.TableRow
		}
	}
	return nil
}

func (x *Node) GetTableCell() *TableCell {
	if x != nil {
		if x, ok := x.Content.(*Node_TableCell); ok {
			return x.TableCell
		}
	}
	return nil
}

func (x *Node) GetTaskCheckbox() *TaskCheckbox {
	if x != nil {
		if x, ok := x.Content.(*Node_TaskCheckbox); ok {
			return x.TaskCheckbox
		}
	}
	return nil
}

func (x *Node) GetStrikethrough() *Strikethrough {
	if x != nil {
		if x, ok := x.Content.(*Node_Strikethrough); ok {
			return x.Strikethrough
		}
	}
	return nil
}

func (x *Node) GetContentNode() *FabricContentNode {
	if x != nil {
		if x, ok := x.Content.(*Node_ContentNode); ok {
			return x.ContentNode
		}
	}
	return nil
}

func (x *Node) GetCustom() *Custom {
	if x != nil {
		if x, ok := x.Content.(*Node_Custom); ok {
			return x.Custom
		}
	}
	return nil
}

type isNode_Content interface {
	isNode_Content()
}

type Node_Document struct {
	// Blocks
	Document *Document `protobuf:"bytes,2,opt,name=document,proto3,oneof"`
}

type Node_Paragraph struct {
	Paragraph *Paragraph `protobuf:"bytes,3,opt,name=paragraph,proto3,oneof"`
}

type Node_Heading struct {
	Heading *Heading `protobuf:"bytes,4,opt,name=heading,proto3,oneof"`
}

type Node_ThematicBreak struct {
	ThematicBreak *ThematicBreak `protobuf:"bytes,5,opt,name=thematic_break,json=thematicBreak,proto3,oneof"`
}

type Node_CodeBlock struct {
	CodeBlock *CodeBlock `protobuf:"bytes,6,opt,name=code_block,json=codeBlock,proto3,oneof"`
}

type Node_Blockquote struct {
	Blockquote *Blockquote `protobuf:"bytes,7,opt,name=blockquote,proto3,oneof"`
}

type Node_List struct {
	List *List `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type Node_ListItem struct {
	ListItem *ListItem `protobuf:"bytes,9,opt,name=list_item,json=listItem,proto3,oneof"`
}

type Node_HtmlBlock struct {
	HtmlBlock *HTMLBlock `protobuf:"bytes,10,opt,name=html_block,json=htmlBlock,proto3,oneof"`
}

type Node_Text struct {
	// inlines
	Text *Text `protobuf:"bytes,11,opt,name=text,proto3,oneof"`
}

type Node_CodeSpan struct {
	CodeSpan *CodeSpan `protobuf:"bytes,12,opt,name=code_span,json=codeSpan,proto3,oneof"`
}

type Node_Emphasis struct {
	Emphasis *Emphasis `protobuf:"bytes,13,opt,name=emphasis,proto3,oneof"`
}

type Node_Link struct {
	Link *Link `protobuf:"bytes,14,opt,name=link,proto3,oneof"`
}

type Node_Image struct {
	Image *Image `protobuf:"bytes,15,opt,name=image,proto3,oneof"`
}

type Node_AutoLink struct {
	AutoLink *AutoLink `protobuf:"bytes,16,opt,name=auto_link,json=autoLink,proto3,oneof"`
}

type Node_HtmlInline struct {
	HtmlInline *HTMLInline `protobuf:"bytes,17,opt,name=html_inline,json=htmlInline,proto3,oneof"`
}

type Node_Table struct {
	// Github Flavored Markdown
	// blocks
	Table *Table `protobuf:"bytes,18,opt,name=table,proto3,oneof"`
}

type Node_TableRow struct {
	TableRow *TableRow `protobuf:"bytes,19,opt,name=table_row,json=tableRow,proto3,oneof"`
}

type Node_TableCell struct {
	TableCell *TableCell `protobuf:"bytes,20,opt,name=table_cell,json=tableCell,proto3,oneof"`
}

type Node_TaskCheckbox struct {
	// inline
	TaskCheckbox *TaskCheckbox `protobuf:"bytes,21,opt,name=task_checkbox,json=taskCheckbox,proto3,oneof"`
}

type Node_Strikethrough struct {
	Strikethrough *Strikethrough `protobuf:"bytes,22,opt,name=strikethrough,proto3,oneof"`
}

type Node_ContentNode struct {
	// Root of the plugin-rendered data (?)
	ContentNode *FabricContentNode `protobuf:"bytes,254,opt,name=content_node,json=contentNode,proto3,oneof"`
}

type Node_Custom struct {
	// Custom node types can be serialized using this
	Custom *Custom `protobuf:"bytes,255,opt,name=custom,proto3,oneof"`
}

func (*Node_Document) isNode_Content() {}

func (*Node_Paragraph) isNode_Content() {}

func (*Node_Heading) isNode_Content() {}

func (*Node_ThematicBreak) isNode_Content() {}

func (*Node_CodeBlock) isNode_Content() {}

func (*Node_Blockquote) isNode_Content() {}

func (*Node_List) isNode_Content() {}

func (*Node_ListItem) isNode_Content() {}

func (*Node_HtmlBlock) isNode_Content() {}

func (*Node_Text) isNode_Content() {}

func (*Node_CodeSpan) isNode_Content() {}

func (*Node_Emphasis) isNode_Content() {}

func (*Node_Link) isNode_Content() {}

func (*Node_Image) isNode_Content() {}

func (*Node_AutoLink) isNode_Content() {}

func (*Node_HtmlInline) isNode_Content() {}

func (*Node_Table) isNode_Content() {}

func (*Node_TableRow) isNode_Content() {}

func (*Node_TableCell) isNode_Content() {}

func (*Node_TaskCheckbox) isNode_Content() {}

func (*Node_Strikethrough) isNode_Content() {}

func (*Node_ContentNode) isNode_Content() {}

func (*Node_Custom) isNode_Content() {}

type Document struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_ast_v1_ast_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{1}
}

type Paragraph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsTextBlock   bool                   `protobuf:"varint,1,opt,name=is_text_block,json=isTextBlock,proto3" json:"is_text_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	mi := &file_ast_v1_ast_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraph.ProtoReflect.Descriptor instead.
func (*Paragraph) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{2}
}

func (x *Paragraph) GetIsTextBlock() bool {
	if x != nil {
		return x.IsTextBlock
	}
	return false
}

type Heading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         uint32                 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heading) Reset() {
	*x = Heading{}
	mi := &file_ast_v1_ast_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heading) ProtoMessage() {}

func (x *Heading) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heading.ProtoReflect.Descriptor instead.
func (*Heading) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{3}
}

func (x *Heading) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ThematicBreak struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThematicBreak) Reset() {
	*x = ThematicBreak{}
	mi := &file_ast_v1_ast_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThematicBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThematicBreak) ProtoMessage() {}

func (x *ThematicBreak) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThematicBreak.ProtoReflect.Descriptor instead.
func (*ThematicBreak) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{4}
}

type CodeBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      []byte                 `protobuf:"bytes,1,opt,name=language,proto3,oneof" json:"language,omitempty"`
	Code          []byte                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{5}
}

func (x *CodeBlock) GetLanguage() []byte {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CodeBlock) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Blockquote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blockquote) Reset() {
	*x = Blockquote{}
	mi := &file_ast_v1_ast_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blockquote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blockquote) ProtoMessage() {}

func (x *Blockquote) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blockquote.ProtoReflect.Descriptor instead.
func (*Blockquote) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{6}
}

type List struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Marker        uint32                 `protobuf:"varint,1,opt,name=marker,proto3" json:"marker,omitempty"`
	Start         uint32                 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *List) Reset() {
	*x = List{}
	mi := &file_ast_v1_ast_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{7}
}

func (x *List) GetMarker() uint32 {
	if x != nil {
		return x.Marker
	}
	return 0
}

func (x *List) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListItem) Reset() {
	*x = ListItem{}
	mi := &file_ast_v1_ast_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListItem) ProtoMessage() {}

func (x *ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListItem.ProtoReflect.Descriptor instead.
func (*ListItem) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{8}
}

type HTMLBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Html          []byte                 `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTMLBlock) Reset() {
	*x = HTMLBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTMLBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLBlock) ProtoMessage() {}

func (x *HTMLBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTMLBlock.ProtoReflect.Descriptor instead.
func (*HTMLBlock) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{9}
}

func (x *HTMLBlock) GetHtml() []byte {
	if x != nil {
		return x.Html
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          []byte                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	HardLineBreak bool                   `protobuf:"varint,2,opt,name=hard_line_break,json=hardLineBreak,proto3" json:"hard_line_break,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_ast_v1_ast_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{10}
}

func (x *Text) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Text) GetHardLineBreak() bool {
	if x != nil {
		return x.HardLineBreak
	}
	return false
}

type CodeSpan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          []byte                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeSpan) Reset() {
	*x = CodeSpan{}
	mi := &file_ast_v1_ast_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSpan) ProtoMessage() {}

func (x *CodeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSpan.ProtoReflect.Descriptor instead.
func (*CodeSpan) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{11}
}

func (x *CodeSpan) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Emphasis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         int64                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Emphasis) Reset() {
	*x = Emphasis{}
	mi := &file_ast_v1_ast_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Emphasis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emphasis) ProtoMessage() {}

func (x *Emphasis) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emphasis.ProtoReflect.Descriptor instead.
func (*Emphasis) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{12}
}

func (x *Emphasis) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   []byte                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Title         []byte                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_ast_v1_ast_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{13}
}

func (x *Link) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Link) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        []byte                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Alt           []byte                 `protobuf:"bytes,2,opt,name=alt,proto3" json:"alt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_ast_v1_ast_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{14}
}

func (x *Image) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Image) GetAlt() []byte {
	if x != nil {
		return x.Alt
	}
	return nil
}

type AutoLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoLink) Reset() {
	*x = AutoLink{}
	mi := &file_ast_v1_ast_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLink) ProtoMessage() {}

func (x *AutoLink) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoLink.ProtoReflect.Descriptor instead.
func (*AutoLink) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{15}
}

func (x *AutoLink) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type HTMLInline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Html          []byte                 `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTMLInline) Reset() {
	*x = HTMLInline{}
	mi := &file_ast_v1_ast_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTMLInline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLInline) ProtoMessage() {}

func (x *HTMLInline) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTMLInline.ProtoReflect.Descriptor instead.
func (*HTMLInline) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{16}
}

func (x *HTMLInline) GetHtml() []byte {
	if x != nil {
		return x.Html
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Alignments    []CellAlignment        `protobuf:"varint,2,rep,packed,name=alignments,proto3,enum=ast.v1.CellAlignment" json:"alignments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_ast_v1_ast_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{17}
}

func (x *Table) GetAlignments() []CellAlignment {
	if x != nil {
		return x.Alignments
	}
	return nil
}

type TableRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableRow) Reset() {
	*x = TableRow{}
	mi := &file_ast_v1_ast_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRow) ProtoMessage() {}

func (x *TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRow.ProtoReflect.Descriptor instead.
func (*TableRow) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{18}
}

type TableCell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableCell) Reset() {
	*x = TableCell{}
	mi := &file_ast_v1_ast_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCell) ProtoMessage() {}

func (x *TableCell) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCell.ProtoReflect.Descriptor instead.
func (*TableCell) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{19}
}

type TaskCheckbox struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Checked       bool                   `protobuf:"varint,1,opt,name=checked,proto3" json:"checked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCheckbox) Reset() {
	*x = TaskCheckbox{}
	mi := &file_ast_v1_ast_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCheckbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckbox) ProtoMessage() {}

func (x *TaskCheckbox) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckbox.ProtoReflect.Descriptor instead.
func (*TaskCheckbox) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{20}
}

func (x *TaskCheckbox) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

type Strikethrough struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Strikethrough) Reset() {
	*x = Strikethrough{}
	mi := &file_ast_v1_ast_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Strikethrough) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strikethrough) ProtoMessage() {}

func (x *Strikethrough) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strikethrough.ProtoReflect.Descriptor instead.
func (*Strikethrough) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{21}
}

type Custom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *anypb.Any             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Custom) Reset() {
	*x = Custom{}
	mi := &file_ast_v1_ast_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Custom) ProtoMessage() {}

func (x *Custom) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Custom.ProtoReflect.Descriptor instead.
func (*Custom) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{22}
}

func (x *Custom) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ie "blackstork/builtin"
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// ie "title"
	Plugin        string `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Version       string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_ast_v1_ast_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{23}
}

func (x *Metadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Metadata) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Root of the plugin-rendered data
type FabricContentNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *Metadata              `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Root          *Node                  `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"` // direct content, no document node
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FabricContentNode) Reset() {
	*x = FabricContentNode{}
	mi := &file_ast_v1_ast_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FabricContentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricContentNode) ProtoMessage() {}

func (x *FabricContentNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricContentNode.ProtoReflect.Descriptor instead.
func (*FabricContentNode) Descriptor() ([]byte, []int) {
	return file_ast_v1_ast_proto_rawDescGZIP(), []int{24}
}

func (x *FabricContentNode) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FabricContentNode) GetRoot() *Node {
	if x != nil {
		return x.Root
	}
	return nil
}

var File_ast_v1_ast_proto protoreflect.FileDescriptor

var file_ast_v1_ast_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x09, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x61, 0x6e,
	0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x68,
	0x61, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x0b,
	0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x3d, 0x0a, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xfe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2f,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x1f, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x22, 0x4d, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x0c, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x34,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x22, 0x1f, 0x0a, 0x09, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x74, 0x6d,
	0x6c, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x22, 0x1e, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3e, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x22, 0x20, 0x0a, 0x08, 0x41, 0x75,
	0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x0a,
	0x48, 0x54, 0x4d, 0x4c, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74,
	0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e,
	0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x0a,
	0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x22, 0x0b, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x28, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x22, 0x32, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x63, 0x0a, 0x11, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x2a, 0x7d, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x03, 0x42, 0x84, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x73, 0x74, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6f, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61,
	0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41,
	0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x07, 0x41, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ast_v1_ast_proto_rawDescOnce sync.Once
	file_ast_v1_ast_proto_rawDescData = file_ast_v1_ast_proto_rawDesc
)

func file_ast_v1_ast_proto_rawDescGZIP() []byte {
	file_ast_v1_ast_proto_rawDescOnce.Do(func() {
		file_ast_v1_ast_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_v1_ast_proto_rawDescData)
	})
	return file_ast_v1_ast_proto_rawDescData
}

var file_ast_v1_ast_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ast_v1_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ast_v1_ast_proto_goTypes = []any{
	(CellAlignment)(0),        // 0: ast.v1.CellAlignment
	(*Node)(nil),              // 1: ast.v1.Node
	(*Document)(nil),          // 2: ast.v1.Document
	(*Paragraph)(nil),         // 3: ast.v1.Paragraph
	(*Heading)(nil),           // 4: ast.v1.Heading
	(*ThematicBreak)(nil),     // 5: ast.v1.ThematicBreak
	(*CodeBlock)(nil),         // 6: ast.v1.CodeBlock
	(*Blockquote)(nil),        // 7: ast.v1.Blockquote
	(*List)(nil),              // 8: ast.v1.List
	(*ListItem)(nil),          // 9: ast.v1.ListItem
	(*HTMLBlock)(nil),         // 10: ast.v1.HTMLBlock
	(*Text)(nil),              // 11: ast.v1.Text
	(*CodeSpan)(nil),          // 12: ast.v1.CodeSpan
	(*Emphasis)(nil),          // 13: ast.v1.Emphasis
	(*Link)(nil),              // 14: ast.v1.Link
	(*Image)(nil),             // 15: ast.v1.Image
	(*AutoLink)(nil),          // 16: ast.v1.AutoLink
	(*HTMLInline)(nil),        // 17: ast.v1.HTMLInline
	(*Table)(nil),             // 18: ast.v1.Table
	(*TableRow)(nil),          // 19: ast.v1.TableRow
	(*TableCell)(nil),         // 20: ast.v1.TableCell
	(*TaskCheckbox)(nil),      // 21: ast.v1.TaskCheckbox
	(*Strikethrough)(nil),     // 22: ast.v1.Strikethrough
	(*Custom)(nil),            // 23: ast.v1.Custom
	(*Metadata)(nil),          // 24: ast.v1.Metadata
	(*FabricContentNode)(nil), // 25: ast.v1.FabricContentNode
	(*anypb.Any)(nil),         // 26: google.protobuf.Any
}
var file_ast_v1_ast_proto_depIdxs = []int32{
	1,  // 0: ast.v1.Node.children:type_name -> ast.v1.Node
	2,  // 1: ast.v1.Node.document:type_name -> ast.v1.Document
	3,  // 2: ast.v1.Node.paragraph:type_name -> ast.v1.Paragraph
	4,  // 3: ast.v1.Node.heading:type_name -> ast.v1.Heading
	5,  // 4: ast.v1.Node.thematic_break:type_name -> ast.v1.ThematicBreak
	6,  // 5: ast.v1.Node.code_block:type_name -> ast.v1.CodeBlock
	7,  // 6: ast.v1.Node.blockquote:type_name -> ast.v1.Blockquote
	8,  // 7: ast.v1.Node.list:type_name -> ast.v1.List
	9,  // 8: ast.v1.Node.list_item:type_name -> ast.v1.ListItem
	10, // 9: ast.v1.Node.html_block:type_name -> ast.v1.HTMLBlock
	11, // 10: ast.v1.Node.text:type_name -> ast.v1.Text
	12, // 11: ast.v1.Node.code_span:type_name -> ast.v1.CodeSpan
	13, // 12: ast.v1.Node.emphasis:type_name -> ast.v1.Emphasis
	14, // 13: ast.v1.Node.link:type_name -> ast.v1.Link
	15, // 14: ast.v1.Node.image:type_name -> ast.v1.Image
	16, // 15: ast.v1.Node.auto_link:type_name -> ast.v1.AutoLink
	17, // 16: ast.v1.Node.html_inline:type_name -> ast.v1.HTMLInline
	18, // 17: ast.v1.Node.table:type_name -> ast.v1.Table
	19, // 18: ast.v1.Node.table_row:type_name -> ast.v1.TableRow
	20, // 19: ast.v1.Node.table_cell:type_name -> ast.v1.TableCell
	21, // 20: ast.v1.Node.task_checkbox:type_name -> ast.v1.TaskCheckbox
	22, // 21: ast.v1.Node.strikethrough:type_name -> ast.v1.Strikethrough
	25, // 22: ast.v1.Node.content_node:type_name -> ast.v1.FabricContentNode
	23, // 23: ast.v1.Node.custom:type_name -> ast.v1.Custom
	0,  // 24: ast.v1.Table.alignments:type_name -> ast.v1.CellAlignment
	26, // 25: ast.v1.Custom.data:type_name -> google.protobuf.Any
	24, // 26: ast.v1.FabricContentNode.metadata:type_name -> ast.v1.Metadata
	1,  // 27: ast.v1.FabricContentNode.root:type_name -> ast.v1.Node
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_ast_v1_ast_proto_init() }
func file_ast_v1_ast_proto_init() {
	if File_ast_v1_ast_proto != nil {
		return
	}
	file_ast_v1_ast_proto_msgTypes[0].OneofWrappers = []any{
		(*Node_Document)(nil),
		(*Node_Paragraph)(nil),
		(*Node_Heading)(nil),
		(*Node_ThematicBreak)(nil),
		(*Node_CodeBlock)(nil),
		(*Node_Blockquote)(nil),
		(*Node_List)(nil),
		(*Node_ListItem)(nil),
		(*Node_HtmlBlock)(nil),
		(*Node_Text)(nil),
		(*Node_CodeSpan)(nil),
		(*Node_Emphasis)(nil),
		(*Node_Link)(nil),
		(*Node_Image)(nil),
		(*Node_AutoLink)(nil),
		(*Node_HtmlInline)(nil),
		(*Node_Table)(nil),
		(*Node_TableRow)(nil),
		(*Node_TableCell)(nil),
		(*Node_TaskCheckbox)(nil),
		(*Node_Strikethrough)(nil),
		(*Node_ContentNode)(nil),
		(*Node_Custom)(nil),
	}
	file_ast_v1_ast_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_v1_ast_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_v1_ast_proto_goTypes,
		DependencyIndexes: file_ast_v1_ast_proto_depIdxs,
		EnumInfos:         file_ast_v1_ast_proto_enumTypes,
		MessageInfos:      file_ast_v1_ast_proto_msgTypes,
	}.Build()
	File_ast_v1_ast_proto = out.File
	file_ast_v1_ast_proto_rawDesc = nil
	file_ast_v1_ast_proto_goTypes = nil
	file_ast_v1_ast_proto_depIdxs = nil
}
