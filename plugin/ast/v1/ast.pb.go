// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: ast/v1/ast.proto

package astv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellAlignment int32

const (
	CellAlignment_CELL_ALIGNMENT_UNSPECIFIED CellAlignment = 0
	CellAlignment_CELL_ALIGNMENT_LEFT        CellAlignment = 1
	CellAlignment_CELL_ALIGNMENT_CENTER      CellAlignment = 2
	CellAlignment_CELL_ALIGNMENT_RIGHT       CellAlignment = 3
)

// Enum value maps for CellAlignment.
var (
	CellAlignment_name = map[int32]string{
		0: "CELL_ALIGNMENT_UNSPECIFIED",
		1: "CELL_ALIGNMENT_LEFT",
		2: "CELL_ALIGNMENT_CENTER",
		3: "CELL_ALIGNMENT_RIGHT",
	}
	CellAlignment_value = map[string]int32{
		"CELL_ALIGNMENT_UNSPECIFIED": 0,
		"CELL_ALIGNMENT_LEFT":        1,
		"CELL_ALIGNMENT_CENTER":      2,
		"CELL_ALIGNMENT_RIGHT":       3,
	}
)

func (x CellAlignment) Enum() *CellAlignment {
	p := new(CellAlignment)
	*p = x
	return p
}

func (x CellAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_v1_ast_proto_enumTypes[0].Descriptor()
}

func (CellAlignment) Type() protoreflect.EnumType {
	return &file_ast_v1_ast_proto_enumTypes[0]
}

func (x CellAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Custom_RenderScope int32

const (
	Custom_RENDER_SCOPE_UNSPECIFIED Custom_RenderScope = 0
	// Renderer receives only the current node
	Custom_RENDER_SCOPE_NODE Custom_RenderScope = 1
	// Renderer receives the entire parent content node
	Custom_RENDER_SCOPE_CONTENT Custom_RenderScope = 2
	// Renderer receives the entire parent section or a document (if not within a section)
	Custom_RENDER_SCOPE_SECTION Custom_RenderScope = 3
	// Renderer receives the entire parent document
	Custom_RENDER_SCOPE_DOCUMENT Custom_RenderScope = 4
)

// Enum value maps for Custom_RenderScope.
var (
	Custom_RenderScope_name = map[int32]string{
		0: "RENDER_SCOPE_UNSPECIFIED",
		1: "RENDER_SCOPE_NODE",
		2: "RENDER_SCOPE_CONTENT",
		3: "RENDER_SCOPE_SECTION",
		4: "RENDER_SCOPE_DOCUMENT",
	}
	Custom_RenderScope_value = map[string]int32{
		"RENDER_SCOPE_UNSPECIFIED": 0,
		"RENDER_SCOPE_NODE":        1,
		"RENDER_SCOPE_CONTENT":     2,
		"RENDER_SCOPE_SECTION":     3,
		"RENDER_SCOPE_DOCUMENT":    4,
	}
)

func (x Custom_RenderScope) Enum() *Custom_RenderScope {
	p := new(Custom_RenderScope)
	*p = x
	return p
}

func (x Custom_RenderScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Custom_RenderScope) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_v1_ast_proto_enumTypes[1].Descriptor()
}

func (Custom_RenderScope) Type() protoreflect.EnumType {
	return &file_ast_v1_ast_proto_enumTypes[1]
}

func (x Custom_RenderScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Node struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Children *[]*Node               `protobuf:"bytes,1,rep,name=children"`
	xxx_hidden_Content  isNode_Content         `protobuf_oneof:"content"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_ast_v1_ast_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Node) GetChildren() []*Node {
	if x != nil {
		if x.xxx_hidden_Children != nil {
			return *x.xxx_hidden_Children
		}
	}
	return nil
}

func (x *Node) GetParagraph() *Paragraph {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Paragraph); ok {
			return x.Paragraph
		}
	}
	return nil
}

func (x *Node) GetHeading() *Heading {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Heading); ok {
			return x.Heading
		}
	}
	return nil
}

func (x *Node) GetThematicBreak() *ThematicBreak {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_ThematicBreak); ok {
			return x.ThematicBreak
		}
	}
	return nil
}

func (x *Node) GetCodeBlock() *CodeBlock {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_CodeBlock); ok {
			return x.CodeBlock
		}
	}
	return nil
}

func (x *Node) GetBlockquote() *Blockquote {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Blockquote); ok {
			return x.Blockquote
		}
	}
	return nil
}

func (x *Node) GetList() *List {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *Node) GetListItem() *ListItem {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_ListItem); ok {
			return x.ListItem
		}
	}
	return nil
}

func (x *Node) GetHtmlBlock() *HTMLBlock {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_HtmlBlock); ok {
			return x.HtmlBlock
		}
	}
	return nil
}

func (x *Node) GetText() *Text {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *Node) GetCodeSpan() *CodeSpan {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_CodeSpan); ok {
			return x.CodeSpan
		}
	}
	return nil
}

func (x *Node) GetEmphasis() *Emphasis {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Emphasis); ok {
			return x.Emphasis
		}
	}
	return nil
}

func (x *Node) GetLink() *Link {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Link); ok {
			return x.Link
		}
	}
	return nil
}

func (x *Node) GetImage() *Image {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *Node) GetAutoLink() *AutoLink {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_AutoLink); ok {
			return x.AutoLink
		}
	}
	return nil
}

func (x *Node) GetHtmlInline() *HTMLInline {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_HtmlInline); ok {
			return x.HtmlInline
		}
	}
	return nil
}

func (x *Node) GetTable() *Table {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Table); ok {
			return x.Table
		}
	}
	return nil
}

func (x *Node) GetTableRow() *TableRow {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_TableRow); ok {
			return x.TableRow
		}
	}
	return nil
}

func (x *Node) GetTableCell() *TableCell {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_TableCell); ok {
			return x.TableCell
		}
	}
	return nil
}

func (x *Node) GetTaskCheckbox() *TaskCheckbox {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_TaskCheckbox); ok {
			return x.TaskCheckbox
		}
	}
	return nil
}

func (x *Node) GetStrikethrough() *Strikethrough {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Strikethrough); ok {
			return x.Strikethrough
		}
	}
	return nil
}

func (x *Node) GetFabricDocument() *FabricDocument {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_FabricDocument); ok {
			return x.FabricDocument
		}
	}
	return nil
}

func (x *Node) GetFabricSection() *FabricSection {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_FabricSection); ok {
			return x.FabricSection
		}
	}
	return nil
}

func (x *Node) GetFabricContent() *FabricContent {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_FabricContent); ok {
			return x.FabricContent
		}
	}
	return nil
}

func (x *Node) GetCustom() *Custom {
	if x != nil {
		if x, ok := x.xxx_hidden_Content.(*node_Custom); ok {
			return x.Custom
		}
	}
	return nil
}

func (x *Node) SetChildren(v []*Node) {
	x.xxx_hidden_Children = &v
}

func (x *Node) SetParagraph(v *Paragraph) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Paragraph{v}
}

func (x *Node) SetHeading(v *Heading) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Heading{v}
}

func (x *Node) SetThematicBreak(v *ThematicBreak) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_ThematicBreak{v}
}

func (x *Node) SetCodeBlock(v *CodeBlock) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_CodeBlock{v}
}

func (x *Node) SetBlockquote(v *Blockquote) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Blockquote{v}
}

func (x *Node) SetList(v *List) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_List{v}
}

func (x *Node) SetListItem(v *ListItem) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_ListItem{v}
}

func (x *Node) SetHtmlBlock(v *HTMLBlock) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_HtmlBlock{v}
}

func (x *Node) SetText(v *Text) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Text{v}
}

func (x *Node) SetCodeSpan(v *CodeSpan) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_CodeSpan{v}
}

func (x *Node) SetEmphasis(v *Emphasis) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Emphasis{v}
}

func (x *Node) SetLink(v *Link) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Link{v}
}

func (x *Node) SetImage(v *Image) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Image{v}
}

func (x *Node) SetAutoLink(v *AutoLink) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_AutoLink{v}
}

func (x *Node) SetHtmlInline(v *HTMLInline) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_HtmlInline{v}
}

func (x *Node) SetTable(v *Table) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Table{v}
}

func (x *Node) SetTableRow(v *TableRow) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_TableRow{v}
}

func (x *Node) SetTableCell(v *TableCell) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_TableCell{v}
}

func (x *Node) SetTaskCheckbox(v *TaskCheckbox) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_TaskCheckbox{v}
}

func (x *Node) SetStrikethrough(v *Strikethrough) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Strikethrough{v}
}

func (x *Node) SetFabricDocument(v *FabricDocument) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_FabricDocument{v}
}

func (x *Node) SetFabricSection(v *FabricSection) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_FabricSection{v}
}

func (x *Node) SetFabricContent(v *FabricContent) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_FabricContent{v}
}

func (x *Node) SetCustom(v *Custom) {
	if v == nil {
		x.xxx_hidden_Content = nil
		return
	}
	x.xxx_hidden_Content = &node_Custom{v}
}

func (x *Node) HasContent() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Content != nil
}

func (x *Node) HasParagraph() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Paragraph)
	return ok
}

func (x *Node) HasHeading() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Heading)
	return ok
}

func (x *Node) HasThematicBreak() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_ThematicBreak)
	return ok
}

func (x *Node) HasCodeBlock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_CodeBlock)
	return ok
}

func (x *Node) HasBlockquote() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Blockquote)
	return ok
}

func (x *Node) HasList() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_List)
	return ok
}

func (x *Node) HasListItem() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_ListItem)
	return ok
}

func (x *Node) HasHtmlBlock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_HtmlBlock)
	return ok
}

func (x *Node) HasText() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Text)
	return ok
}

func (x *Node) HasCodeSpan() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_CodeSpan)
	return ok
}

func (x *Node) HasEmphasis() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Emphasis)
	return ok
}

func (x *Node) HasLink() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Link)
	return ok
}

func (x *Node) HasImage() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Image)
	return ok
}

func (x *Node) HasAutoLink() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_AutoLink)
	return ok
}

func (x *Node) HasHtmlInline() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_HtmlInline)
	return ok
}

func (x *Node) HasTable() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Table)
	return ok
}

func (x *Node) HasTableRow() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_TableRow)
	return ok
}

func (x *Node) HasTableCell() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_TableCell)
	return ok
}

func (x *Node) HasTaskCheckbox() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_TaskCheckbox)
	return ok
}

func (x *Node) HasStrikethrough() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Strikethrough)
	return ok
}

func (x *Node) HasFabricDocument() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_FabricDocument)
	return ok
}

func (x *Node) HasFabricSection() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_FabricSection)
	return ok
}

func (x *Node) HasFabricContent() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_FabricContent)
	return ok
}

func (x *Node) HasCustom() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Content.(*node_Custom)
	return ok
}

func (x *Node) ClearContent() {
	x.xxx_hidden_Content = nil
}

func (x *Node) ClearParagraph() {
	if _, ok := x.xxx_hidden_Content.(*node_Paragraph); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearHeading() {
	if _, ok := x.xxx_hidden_Content.(*node_Heading); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearThematicBreak() {
	if _, ok := x.xxx_hidden_Content.(*node_ThematicBreak); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearCodeBlock() {
	if _, ok := x.xxx_hidden_Content.(*node_CodeBlock); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearBlockquote() {
	if _, ok := x.xxx_hidden_Content.(*node_Blockquote); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearList() {
	if _, ok := x.xxx_hidden_Content.(*node_List); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearListItem() {
	if _, ok := x.xxx_hidden_Content.(*node_ListItem); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearHtmlBlock() {
	if _, ok := x.xxx_hidden_Content.(*node_HtmlBlock); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearText() {
	if _, ok := x.xxx_hidden_Content.(*node_Text); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearCodeSpan() {
	if _, ok := x.xxx_hidden_Content.(*node_CodeSpan); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearEmphasis() {
	if _, ok := x.xxx_hidden_Content.(*node_Emphasis); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearLink() {
	if _, ok := x.xxx_hidden_Content.(*node_Link); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearImage() {
	if _, ok := x.xxx_hidden_Content.(*node_Image); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearAutoLink() {
	if _, ok := x.xxx_hidden_Content.(*node_AutoLink); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearHtmlInline() {
	if _, ok := x.xxx_hidden_Content.(*node_HtmlInline); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearTable() {
	if _, ok := x.xxx_hidden_Content.(*node_Table); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearTableRow() {
	if _, ok := x.xxx_hidden_Content.(*node_TableRow); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearTableCell() {
	if _, ok := x.xxx_hidden_Content.(*node_TableCell); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearTaskCheckbox() {
	if _, ok := x.xxx_hidden_Content.(*node_TaskCheckbox); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearStrikethrough() {
	if _, ok := x.xxx_hidden_Content.(*node_Strikethrough); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearFabricDocument() {
	if _, ok := x.xxx_hidden_Content.(*node_FabricDocument); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearFabricSection() {
	if _, ok := x.xxx_hidden_Content.(*node_FabricSection); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearFabricContent() {
	if _, ok := x.xxx_hidden_Content.(*node_FabricContent); ok {
		x.xxx_hidden_Content = nil
	}
}

func (x *Node) ClearCustom() {
	if _, ok := x.xxx_hidden_Content.(*node_Custom); ok {
		x.xxx_hidden_Content = nil
	}
}

const Node_Content_not_set_case case_Node_Content = 0
const Node_Paragraph_case case_Node_Content = 3
const Node_Heading_case case_Node_Content = 4
const Node_ThematicBreak_case case_Node_Content = 5
const Node_CodeBlock_case case_Node_Content = 6
const Node_Blockquote_case case_Node_Content = 7
const Node_List_case case_Node_Content = 8
const Node_ListItem_case case_Node_Content = 9
const Node_HtmlBlock_case case_Node_Content = 10
const Node_Text_case case_Node_Content = 11
const Node_CodeSpan_case case_Node_Content = 12
const Node_Emphasis_case case_Node_Content = 13
const Node_Link_case case_Node_Content = 14
const Node_Image_case case_Node_Content = 15
const Node_AutoLink_case case_Node_Content = 16
const Node_HtmlInline_case case_Node_Content = 17
const Node_Table_case case_Node_Content = 18
const Node_TableRow_case case_Node_Content = 19
const Node_TableCell_case case_Node_Content = 20
const Node_TaskCheckbox_case case_Node_Content = 21
const Node_Strikethrough_case case_Node_Content = 22
const Node_FabricDocument_case case_Node_Content = 252
const Node_FabricSection_case case_Node_Content = 253
const Node_FabricContent_case case_Node_Content = 254
const Node_Custom_case case_Node_Content = 255

func (x *Node) WhichContent() case_Node_Content {
	if x == nil {
		return Node_Content_not_set_case
	}
	switch x.xxx_hidden_Content.(type) {
	case *node_Paragraph:
		return Node_Paragraph_case
	case *node_Heading:
		return Node_Heading_case
	case *node_ThematicBreak:
		return Node_ThematicBreak_case
	case *node_CodeBlock:
		return Node_CodeBlock_case
	case *node_Blockquote:
		return Node_Blockquote_case
	case *node_List:
		return Node_List_case
	case *node_ListItem:
		return Node_ListItem_case
	case *node_HtmlBlock:
		return Node_HtmlBlock_case
	case *node_Text:
		return Node_Text_case
	case *node_CodeSpan:
		return Node_CodeSpan_case
	case *node_Emphasis:
		return Node_Emphasis_case
	case *node_Link:
		return Node_Link_case
	case *node_Image:
		return Node_Image_case
	case *node_AutoLink:
		return Node_AutoLink_case
	case *node_HtmlInline:
		return Node_HtmlInline_case
	case *node_Table:
		return Node_Table_case
	case *node_TableRow:
		return Node_TableRow_case
	case *node_TableCell:
		return Node_TableCell_case
	case *node_TaskCheckbox:
		return Node_TaskCheckbox_case
	case *node_Strikethrough:
		return Node_Strikethrough_case
	case *node_FabricDocument:
		return Node_FabricDocument_case
	case *node_FabricSection:
		return Node_FabricSection_case
	case *node_FabricContent:
		return Node_FabricContent_case
	case *node_Custom:
		return Node_Custom_case
	default:
		return Node_Content_not_set_case
	}
}

type Node_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Children []*Node
	// Fields of oneof xxx_hidden_Content:
	Paragraph     *Paragraph
	Heading       *Heading
	ThematicBreak *ThematicBreak
	CodeBlock     *CodeBlock
	Blockquote    *Blockquote
	List          *List
	ListItem      *ListItem
	HtmlBlock     *HTMLBlock
	// inlines
	Text       *Text
	CodeSpan   *CodeSpan
	Emphasis   *Emphasis
	Link       *Link
	Image      *Image
	AutoLink   *AutoLink
	HtmlInline *HTMLInline
	// Github Flavored Markdown
	// blocks
	Table     *Table
	TableRow  *TableRow
	TableCell *TableCell
	// inline
	TaskCheckbox   *TaskCheckbox
	Strikethrough  *Strikethrough
	FabricDocument *FabricDocument
	FabricSection  *FabricSection
	// Root of the plugin-authored data
	FabricContent *FabricContent
	// Custom node types can be serialized using this
	Custom *Custom
	// -- end of xxx_hidden_Content
}

func (b0 Node_builder) Build() *Node {
	m0 := &Node{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Children = &b.Children
	if b.Paragraph != nil {
		x.xxx_hidden_Content = &node_Paragraph{b.Paragraph}
	}
	if b.Heading != nil {
		x.xxx_hidden_Content = &node_Heading{b.Heading}
	}
	if b.ThematicBreak != nil {
		x.xxx_hidden_Content = &node_ThematicBreak{b.ThematicBreak}
	}
	if b.CodeBlock != nil {
		x.xxx_hidden_Content = &node_CodeBlock{b.CodeBlock}
	}
	if b.Blockquote != nil {
		x.xxx_hidden_Content = &node_Blockquote{b.Blockquote}
	}
	if b.List != nil {
		x.xxx_hidden_Content = &node_List{b.List}
	}
	if b.ListItem != nil {
		x.xxx_hidden_Content = &node_ListItem{b.ListItem}
	}
	if b.HtmlBlock != nil {
		x.xxx_hidden_Content = &node_HtmlBlock{b.HtmlBlock}
	}
	if b.Text != nil {
		x.xxx_hidden_Content = &node_Text{b.Text}
	}
	if b.CodeSpan != nil {
		x.xxx_hidden_Content = &node_CodeSpan{b.CodeSpan}
	}
	if b.Emphasis != nil {
		x.xxx_hidden_Content = &node_Emphasis{b.Emphasis}
	}
	if b.Link != nil {
		x.xxx_hidden_Content = &node_Link{b.Link}
	}
	if b.Image != nil {
		x.xxx_hidden_Content = &node_Image{b.Image}
	}
	if b.AutoLink != nil {
		x.xxx_hidden_Content = &node_AutoLink{b.AutoLink}
	}
	if b.HtmlInline != nil {
		x.xxx_hidden_Content = &node_HtmlInline{b.HtmlInline}
	}
	if b.Table != nil {
		x.xxx_hidden_Content = &node_Table{b.Table}
	}
	if b.TableRow != nil {
		x.xxx_hidden_Content = &node_TableRow{b.TableRow}
	}
	if b.TableCell != nil {
		x.xxx_hidden_Content = &node_TableCell{b.TableCell}
	}
	if b.TaskCheckbox != nil {
		x.xxx_hidden_Content = &node_TaskCheckbox{b.TaskCheckbox}
	}
	if b.Strikethrough != nil {
		x.xxx_hidden_Content = &node_Strikethrough{b.Strikethrough}
	}
	if b.FabricDocument != nil {
		x.xxx_hidden_Content = &node_FabricDocument{b.FabricDocument}
	}
	if b.FabricSection != nil {
		x.xxx_hidden_Content = &node_FabricSection{b.FabricSection}
	}
	if b.FabricContent != nil {
		x.xxx_hidden_Content = &node_FabricContent{b.FabricContent}
	}
	if b.Custom != nil {
		x.xxx_hidden_Content = &node_Custom{b.Custom}
	}
	return m0
}

type case_Node_Content protoreflect.FieldNumber

func (x case_Node_Content) String() string {
	md := file_ast_v1_ast_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isNode_Content interface {
	isNode_Content()
}

type node_Paragraph struct {
	Paragraph *Paragraph `protobuf:"bytes,3,opt,name=paragraph,oneof"`
}

type node_Heading struct {
	Heading *Heading `protobuf:"bytes,4,opt,name=heading,oneof"`
}

type node_ThematicBreak struct {
	ThematicBreak *ThematicBreak `protobuf:"bytes,5,opt,name=thematic_break,json=thematicBreak,oneof"`
}

type node_CodeBlock struct {
	CodeBlock *CodeBlock `protobuf:"bytes,6,opt,name=code_block,json=codeBlock,oneof"`
}

type node_Blockquote struct {
	Blockquote *Blockquote `protobuf:"bytes,7,opt,name=blockquote,oneof"`
}

type node_List struct {
	List *List `protobuf:"bytes,8,opt,name=list,oneof"`
}

type node_ListItem struct {
	ListItem *ListItem `protobuf:"bytes,9,opt,name=list_item,json=listItem,oneof"`
}

type node_HtmlBlock struct {
	HtmlBlock *HTMLBlock `protobuf:"bytes,10,opt,name=html_block,json=htmlBlock,oneof"`
}

type node_Text struct {
	// inlines
	Text *Text `protobuf:"bytes,11,opt,name=text,oneof"`
}

type node_CodeSpan struct {
	CodeSpan *CodeSpan `protobuf:"bytes,12,opt,name=code_span,json=codeSpan,oneof"`
}

type node_Emphasis struct {
	Emphasis *Emphasis `protobuf:"bytes,13,opt,name=emphasis,oneof"`
}

type node_Link struct {
	Link *Link `protobuf:"bytes,14,opt,name=link,oneof"`
}

type node_Image struct {
	Image *Image `protobuf:"bytes,15,opt,name=image,oneof"`
}

type node_AutoLink struct {
	AutoLink *AutoLink `protobuf:"bytes,16,opt,name=auto_link,json=autoLink,oneof"`
}

type node_HtmlInline struct {
	HtmlInline *HTMLInline `protobuf:"bytes,17,opt,name=html_inline,json=htmlInline,oneof"`
}

type node_Table struct {
	// Github Flavored Markdown
	// blocks
	Table *Table `protobuf:"bytes,18,opt,name=table,oneof"`
}

type node_TableRow struct {
	TableRow *TableRow `protobuf:"bytes,19,opt,name=table_row,json=tableRow,oneof"`
}

type node_TableCell struct {
	TableCell *TableCell `protobuf:"bytes,20,opt,name=table_cell,json=tableCell,oneof"`
}

type node_TaskCheckbox struct {
	// inline
	TaskCheckbox *TaskCheckbox `protobuf:"bytes,21,opt,name=task_checkbox,json=taskCheckbox,oneof"`
}

type node_Strikethrough struct {
	Strikethrough *Strikethrough `protobuf:"bytes,22,opt,name=strikethrough,oneof"`
}

type node_FabricDocument struct {
	FabricDocument *FabricDocument `protobuf:"bytes,252,opt,name=fabric_document,json=fabricDocument,oneof"`
}

type node_FabricSection struct {
	FabricSection *FabricSection `protobuf:"bytes,253,opt,name=fabric_section,json=fabricSection,oneof"`
}

type node_FabricContent struct {
	// Root of the plugin-authored data
	FabricContent *FabricContent `protobuf:"bytes,254,opt,name=fabric_content,json=fabricContent,oneof"`
}

type node_Custom struct {
	// Custom node types can be serialized using this
	Custom *Custom `protobuf:"bytes,255,opt,name=custom,oneof"`
}

func (*node_Paragraph) isNode_Content() {}

func (*node_Heading) isNode_Content() {}

func (*node_ThematicBreak) isNode_Content() {}

func (*node_CodeBlock) isNode_Content() {}

func (*node_Blockquote) isNode_Content() {}

func (*node_List) isNode_Content() {}

func (*node_ListItem) isNode_Content() {}

func (*node_HtmlBlock) isNode_Content() {}

func (*node_Text) isNode_Content() {}

func (*node_CodeSpan) isNode_Content() {}

func (*node_Emphasis) isNode_Content() {}

func (*node_Link) isNode_Content() {}

func (*node_Image) isNode_Content() {}

func (*node_AutoLink) isNode_Content() {}

func (*node_HtmlInline) isNode_Content() {}

func (*node_Table) isNode_Content() {}

func (*node_TableRow) isNode_Content() {}

func (*node_TableCell) isNode_Content() {}

func (*node_TaskCheckbox) isNode_Content() {}

func (*node_Strikethrough) isNode_Content() {}

func (*node_FabricDocument) isNode_Content() {}

func (*node_FabricSection) isNode_Content() {}

func (*node_FabricContent) isNode_Content() {}

func (*node_Custom) isNode_Content() {}

type Document struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_ast_v1_ast_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Document_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Document_builder) Build() *Document {
	m0 := &Document{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Paragraph struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IsTextBlock bool                   `protobuf:"varint,1,opt,name=is_text_block,json=isTextBlock"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	mi := &file_ast_v1_ast_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Paragraph) GetIsTextBlock() bool {
	if x != nil {
		return x.xxx_hidden_IsTextBlock
	}
	return false
}

func (x *Paragraph) SetIsTextBlock(v bool) {
	x.xxx_hidden_IsTextBlock = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Paragraph) HasIsTextBlock() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Paragraph) ClearIsTextBlock() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IsTextBlock = false
}

type Paragraph_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IsTextBlock *bool
}

func (b0 Paragraph_builder) Build() *Paragraph {
	m0 := &Paragraph{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IsTextBlock != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_IsTextBlock = *b.IsTextBlock
	}
	return m0
}

type Heading struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Level       uint32                 `protobuf:"varint,1,opt,name=level"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Heading) Reset() {
	*x = Heading{}
	mi := &file_ast_v1_ast_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heading) ProtoMessage() {}

func (x *Heading) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Heading) GetLevel() uint32 {
	if x != nil {
		return x.xxx_hidden_Level
	}
	return 0
}

func (x *Heading) SetLevel(v uint32) {
	x.xxx_hidden_Level = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Heading) HasLevel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Heading) ClearLevel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Level = 0
}

type Heading_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Level *uint32
}

func (b0 Heading_builder) Build() *Heading {
	m0 := &Heading{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Level != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Level = *b.Level
	}
	return m0
}

type ThematicBreak struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThematicBreak) Reset() {
	*x = ThematicBreak{}
	mi := &file_ast_v1_ast_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThematicBreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThematicBreak) ProtoMessage() {}

func (x *ThematicBreak) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ThematicBreak_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ThematicBreak_builder) Build() *ThematicBreak {
	m0 := &ThematicBreak{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type CodeBlock struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Language    []byte                 `protobuf:"bytes,1,opt,name=language"`
	xxx_hidden_Code        []byte                 `protobuf:"bytes,2,opt,name=code"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CodeBlock) GetLanguage() []byte {
	if x != nil {
		return x.xxx_hidden_Language
	}
	return nil
}

func (x *CodeBlock) GetCode() []byte {
	if x != nil {
		return x.xxx_hidden_Code
	}
	return nil
}

func (x *CodeBlock) SetLanguage(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Language = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CodeBlock) SetCode(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Code = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *CodeBlock) HasLanguage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CodeBlock) HasCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CodeBlock) ClearLanguage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Language = nil
}

func (x *CodeBlock) ClearCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Code = nil
}

type CodeBlock_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Language []byte
	Code     []byte
}

func (b0 CodeBlock_builder) Build() *CodeBlock {
	m0 := &CodeBlock{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Language != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Language = b.Language
	}
	if b.Code != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Code = b.Code
	}
	return m0
}

type Blockquote struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blockquote) Reset() {
	*x = Blockquote{}
	mi := &file_ast_v1_ast_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blockquote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blockquote) ProtoMessage() {}

func (x *Blockquote) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Blockquote_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Blockquote_builder) Build() *Blockquote {
	m0 := &Blockquote{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type List struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Marker      uint32                 `protobuf:"varint,1,opt,name=marker"`
	xxx_hidden_Start       uint32                 `protobuf:"varint,2,opt,name=start"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *List) Reset() {
	*x = List{}
	mi := &file_ast_v1_ast_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *List) GetMarker() uint32 {
	if x != nil {
		return x.xxx_hidden_Marker
	}
	return 0
}

func (x *List) GetStart() uint32 {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return 0
}

func (x *List) SetMarker(v uint32) {
	x.xxx_hidden_Marker = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *List) SetStart(v uint32) {
	x.xxx_hidden_Start = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *List) HasMarker() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *List) HasStart() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *List) ClearMarker() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Marker = 0
}

func (x *List) ClearStart() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Start = 0
}

type List_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Marker *uint32
	Start  *uint32
}

func (b0 List_builder) Build() *List {
	m0 := &List{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Marker != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Marker = *b.Marker
	}
	if b.Start != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Start = *b.Start
	}
	return m0
}

type ListItem struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListItem) Reset() {
	*x = ListItem{}
	mi := &file_ast_v1_ast_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListItem) ProtoMessage() {}

func (x *ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListItem_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListItem_builder) Build() *ListItem {
	m0 := &ListItem{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type HTMLBlock struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Html        []byte                 `protobuf:"bytes,1,opt,name=html"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HTMLBlock) Reset() {
	*x = HTMLBlock{}
	mi := &file_ast_v1_ast_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTMLBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLBlock) ProtoMessage() {}

func (x *HTMLBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HTMLBlock) GetHtml() []byte {
	if x != nil {
		return x.xxx_hidden_Html
	}
	return nil
}

func (x *HTMLBlock) SetHtml(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Html = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *HTMLBlock) HasHtml() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HTMLBlock) ClearHtml() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Html = nil
}

type HTMLBlock_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Html []byte
}

func (b0 HTMLBlock_builder) Build() *HTMLBlock {
	m0 := &HTMLBlock{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Html != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Html = b.Html
	}
	return m0
}

type Text struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Text          []byte                 `protobuf:"bytes,1,opt,name=text"`
	xxx_hidden_HardLineBreak bool                   `protobuf:"varint,2,opt,name=hard_line_break,json=hardLineBreak"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_ast_v1_ast_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Text) GetText() []byte {
	if x != nil {
		return x.xxx_hidden_Text
	}
	return nil
}

func (x *Text) GetHardLineBreak() bool {
	if x != nil {
		return x.xxx_hidden_HardLineBreak
	}
	return false
}

func (x *Text) SetText(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Text = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Text) SetHardLineBreak(v bool) {
	x.xxx_hidden_HardLineBreak = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Text) HasText() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Text) HasHardLineBreak() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Text) ClearText() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Text = nil
}

func (x *Text) ClearHardLineBreak() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_HardLineBreak = false
}

type Text_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Text          []byte
	HardLineBreak *bool
}

func (b0 Text_builder) Build() *Text {
	m0 := &Text{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Text != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Text = b.Text
	}
	if b.HardLineBreak != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_HardLineBreak = *b.HardLineBreak
	}
	return m0
}

type CodeSpan struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Code        []byte                 `protobuf:"bytes,1,opt,name=code"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CodeSpan) Reset() {
	*x = CodeSpan{}
	mi := &file_ast_v1_ast_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSpan) ProtoMessage() {}

func (x *CodeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CodeSpan) GetCode() []byte {
	if x != nil {
		return x.xxx_hidden_Code
	}
	return nil
}

func (x *CodeSpan) SetCode(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Code = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *CodeSpan) HasCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CodeSpan) ClearCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Code = nil
}

type CodeSpan_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Code []byte
}

func (b0 CodeSpan_builder) Build() *CodeSpan {
	m0 := &CodeSpan{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Code != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Code = b.Code
	}
	return m0
}

type Emphasis struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Level       int64                  `protobuf:"varint,1,opt,name=level"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Emphasis) Reset() {
	*x = Emphasis{}
	mi := &file_ast_v1_ast_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Emphasis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emphasis) ProtoMessage() {}

func (x *Emphasis) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Emphasis) GetLevel() int64 {
	if x != nil {
		return x.xxx_hidden_Level
	}
	return 0
}

func (x *Emphasis) SetLevel(v int64) {
	x.xxx_hidden_Level = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Emphasis) HasLevel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Emphasis) ClearLevel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Level = 0
}

type Emphasis_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Level *int64
}

func (b0 Emphasis_builder) Build() *Emphasis {
	m0 := &Emphasis{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Level != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Level = *b.Level
	}
	return m0
}

type Link struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Destination []byte                 `protobuf:"bytes,1,opt,name=destination"`
	xxx_hidden_Title       []byte                 `protobuf:"bytes,2,opt,name=title"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_ast_v1_ast_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Link) GetDestination() []byte {
	if x != nil {
		return x.xxx_hidden_Destination
	}
	return nil
}

func (x *Link) GetTitle() []byte {
	if x != nil {
		return x.xxx_hidden_Title
	}
	return nil
}

func (x *Link) SetDestination(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Destination = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Link) SetTitle(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Title = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Link) HasDestination() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Link) HasTitle() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Link) ClearDestination() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Destination = nil
}

func (x *Link) ClearTitle() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Title = nil
}

type Link_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Destination []byte
	Title       []byte
}

func (b0 Link_builder) Build() *Link {
	m0 := &Link{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Destination != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Destination = b.Destination
	}
	if b.Title != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Title = b.Title
	}
	return m0
}

type Image struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Source      []byte                 `protobuf:"bytes,1,opt,name=source"`
	xxx_hidden_Alt         []byte                 `protobuf:"bytes,2,opt,name=alt"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_ast_v1_ast_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Image) GetSource() []byte {
	if x != nil {
		return x.xxx_hidden_Source
	}
	return nil
}

func (x *Image) GetAlt() []byte {
	if x != nil {
		return x.xxx_hidden_Alt
	}
	return nil
}

func (x *Image) SetSource(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Source = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Image) SetAlt(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Alt = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Image) HasSource() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Image) HasAlt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Image) ClearSource() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Source = nil
}

func (x *Image) ClearAlt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Alt = nil
}

type Image_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Source []byte
	Alt    []byte
}

func (b0 Image_builder) Build() *Image {
	m0 := &Image{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Source != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Source = b.Source
	}
	if b.Alt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Alt = b.Alt
	}
	return m0
}

type AutoLink struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value       []byte                 `protobuf:"bytes,1,opt,name=value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AutoLink) Reset() {
	*x = AutoLink{}
	mi := &file_ast_v1_ast_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLink) ProtoMessage() {}

func (x *AutoLink) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AutoLink) GetValue() []byte {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *AutoLink) SetValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Value = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *AutoLink) HasValue() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AutoLink) ClearValue() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Value = nil
}

type AutoLink_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Value []byte
}

func (b0 AutoLink_builder) Build() *AutoLink {
	m0 := &AutoLink{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Value != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Value = b.Value
	}
	return m0
}

type HTMLInline struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Html        []byte                 `protobuf:"bytes,1,opt,name=html"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HTMLInline) Reset() {
	*x = HTMLInline{}
	mi := &file_ast_v1_ast_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTMLInline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLInline) ProtoMessage() {}

func (x *HTMLInline) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HTMLInline) GetHtml() []byte {
	if x != nil {
		return x.xxx_hidden_Html
	}
	return nil
}

func (x *HTMLInline) SetHtml(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Html = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *HTMLInline) HasHtml() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HTMLInline) ClearHtml() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Html = nil
}

type HTMLInline_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Html []byte
}

func (b0 HTMLInline_builder) Build() *HTMLInline {
	m0 := &HTMLInline{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Html != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Html = b.Html
	}
	return m0
}

type Table struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Alignments []CellAlignment        `protobuf:"varint,2,rep,packed,name=alignments,enum=ast.v1.CellAlignment"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_ast_v1_ast_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Table) GetAlignments() []CellAlignment {
	if x != nil {
		return x.xxx_hidden_Alignments
	}
	return nil
}

func (x *Table) SetAlignments(v []CellAlignment) {
	x.xxx_hidden_Alignments = v
}

type Table_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Alignments []CellAlignment
}

func (b0 Table_builder) Build() *Table {
	m0 := &Table{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Alignments = b.Alignments
	return m0
}

type TableRow struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableRow) Reset() {
	*x = TableRow{}
	mi := &file_ast_v1_ast_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRow) ProtoMessage() {}

func (x *TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type TableRow_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 TableRow_builder) Build() *TableRow {
	m0 := &TableRow{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type TableCell struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableCell) Reset() {
	*x = TableCell{}
	mi := &file_ast_v1_ast_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCell) ProtoMessage() {}

func (x *TableCell) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type TableCell_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 TableCell_builder) Build() *TableCell {
	m0 := &TableCell{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type TaskCheckbox struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Checked     bool                   `protobuf:"varint,1,opt,name=checked"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TaskCheckbox) Reset() {
	*x = TaskCheckbox{}
	mi := &file_ast_v1_ast_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCheckbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckbox) ProtoMessage() {}

func (x *TaskCheckbox) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskCheckbox) GetChecked() bool {
	if x != nil {
		return x.xxx_hidden_Checked
	}
	return false
}

func (x *TaskCheckbox) SetChecked(v bool) {
	x.xxx_hidden_Checked = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TaskCheckbox) HasChecked() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TaskCheckbox) ClearChecked() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Checked = false
}

type TaskCheckbox_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Checked *bool
}

func (b0 TaskCheckbox_builder) Build() *TaskCheckbox {
	m0 := &TaskCheckbox{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Checked != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Checked = *b.Checked
	}
	return m0
}

type Strikethrough struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Strikethrough) Reset() {
	*x = Strikethrough{}
	mi := &file_ast_v1_ast_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Strikethrough) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strikethrough) ProtoMessage() {}

func (x *Strikethrough) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Strikethrough_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Strikethrough_builder) Build() *Strikethrough {
	m0 := &Strikethrough{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Custom struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data        *anypb.Any             `protobuf:"bytes,1,opt,name=data"`
	xxx_hidden_Scope       Custom_RenderScope     `protobuf:"varint,2,opt,name=scope,enum=ast.v1.Custom_RenderScope"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Custom) Reset() {
	*x = Custom{}
	mi := &file_ast_v1_ast_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Custom) ProtoMessage() {}

func (x *Custom) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Custom) GetData() *anypb.Any {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *Custom) GetScope() Custom_RenderScope {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Scope
		}
	}
	return Custom_RENDER_SCOPE_UNSPECIFIED
}

func (x *Custom) SetData(v *anypb.Any) {
	x.xxx_hidden_Data = v
}

func (x *Custom) SetScope(v Custom_RenderScope) {
	x.xxx_hidden_Scope = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Custom) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *Custom) HasScope() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Custom) ClearData() {
	x.xxx_hidden_Data = nil
}

func (x *Custom) ClearScope() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Scope = Custom_RENDER_SCOPE_UNSPECIFIED
}

type Custom_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Emit node type with a relative path, ie "mymodule/mynode"
	// Consume node type as an absolute path, ie "types.blackstork.io/fabric/v1/custom_nodes/<plugin_name>/mymodule/mynode"
	Data  *anypb.Any
	Scope *Custom_RenderScope
}

func (b0 Custom_builder) Build() *Custom {
	m0 := &Custom{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = b.Data
	if b.Scope != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Scope = *b.Scope
	}
	return m0
}

type Path struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path []uint32               `protobuf:"varint,1,rep,packed,name=path"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_ast_v1_ast_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Path) GetPath() []uint32 {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return nil
}

func (x *Path) SetPath(v []uint32) {
	x.xxx_hidden_Path = v
}

type Path_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path []uint32
}

func (b0 Path_builder) Build() *Path {
	m0 := &Path{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	return m0
}

// Root of the plugin-authored data
type FabricContent struct {
	state           protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Meta *FabricContent_Metadata `protobuf:"bytes,1,opt,name=meta"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FabricContent) Reset() {
	*x = FabricContent{}
	mi := &file_ast_v1_ast_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FabricContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricContent) ProtoMessage() {}

func (x *FabricContent) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FabricContent) GetMeta() *FabricContent_Metadata {
	if x != nil {
		return x.xxx_hidden_Meta
	}
	return nil
}

func (x *FabricContent) SetMeta(v *FabricContent_Metadata) {
	x.xxx_hidden_Meta = v
}

func (x *FabricContent) HasMeta() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Meta != nil
}

func (x *FabricContent) ClearMeta() {
	x.xxx_hidden_Meta = nil
}

type FabricContent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Meta *FabricContent_Metadata
}

func (b0 FabricContent_builder) Build() *FabricContent {
	m0 := &FabricContent{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Meta = b.Meta
	return m0
}

type FabricSection struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FabricSection) Reset() {
	*x = FabricSection{}
	mi := &file_ast_v1_ast_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FabricSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricSection) ProtoMessage() {}

func (x *FabricSection) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type FabricSection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 FabricSection_builder) Build() *FabricSection {
	m0 := &FabricSection{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type FabricDocument struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FabricDocument) Reset() {
	*x = FabricDocument{}
	mi := &file_ast_v1_ast_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FabricDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricDocument) ProtoMessage() {}

func (x *FabricDocument) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type FabricDocument_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 FabricDocument_builder) Build() *FabricDocument {
	m0 := &FabricDocument{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type FabricContent_Metadata struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Provider    *string                `protobuf:"bytes,1,opt,name=provider"`
	xxx_hidden_Plugin      *string                `protobuf:"bytes,2,opt,name=plugin"`
	xxx_hidden_Version     *string                `protobuf:"bytes,3,opt,name=version"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FabricContent_Metadata) Reset() {
	*x = FabricContent_Metadata{}
	mi := &file_ast_v1_ast_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FabricContent_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricContent_Metadata) ProtoMessage() {}

func (x *FabricContent_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ast_v1_ast_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FabricContent_Metadata) GetProvider() string {
	if x != nil {
		if x.xxx_hidden_Provider != nil {
			return *x.xxx_hidden_Provider
		}
		return ""
	}
	return ""
}

func (x *FabricContent_Metadata) GetPlugin() string {
	if x != nil {
		if x.xxx_hidden_Plugin != nil {
			return *x.xxx_hidden_Plugin
		}
		return ""
	}
	return ""
}

func (x *FabricContent_Metadata) GetVersion() string {
	if x != nil {
		if x.xxx_hidden_Version != nil {
			return *x.xxx_hidden_Version
		}
		return ""
	}
	return ""
}

func (x *FabricContent_Metadata) SetProvider(v string) {
	x.xxx_hidden_Provider = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *FabricContent_Metadata) SetPlugin(v string) {
	x.xxx_hidden_Plugin = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *FabricContent_Metadata) SetVersion(v string) {
	x.xxx_hidden_Version = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *FabricContent_Metadata) HasProvider() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FabricContent_Metadata) HasPlugin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FabricContent_Metadata) HasVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FabricContent_Metadata) ClearProvider() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Provider = nil
}

func (x *FabricContent_Metadata) ClearPlugin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Plugin = nil
}

func (x *FabricContent_Metadata) ClearVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Version = nil
}

type FabricContent_Metadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ie "blackstork/builtin"
	Provider *string
	// ie "title"
	Plugin  *string
	Version *string
}

func (b0 FabricContent_Metadata_builder) Build() *FabricContent_Metadata {
	m0 := &FabricContent_Metadata{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Provider != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Provider = b.Provider
	}
	if b.Plugin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Plugin = b.Plugin
	}
	if b.Version != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Version = b.Version
	}
	return m0
}

var File_ast_v1_ast_proto protoreflect.FileDescriptor

var file_ast_v1_ast_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x09, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x61, 0x6e,
	0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x68,
	0x61, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x0b,
	0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x3d, 0x0a, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x42, 0x0a, 0x0f, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xfc,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x0e, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0e, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x78, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1f, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x22, 0x3b, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x22, 0x34, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x1f, 0x0a, 0x09, 0x48, 0x54, 0x4d, 0x4c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x74, 0x6d, 0x6c, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x22, 0x1e, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x68,
	0x61, 0x73, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3e, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x22, 0x20, 0x0a,
	0x08, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x20, 0x0a, 0x0a, 0x48, 0x54, 0x4d, 0x4c, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x74, 0x6d,
	0x6c, 0x22, 0x3e, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x0a, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x22, 0x0b, 0x0a,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x28, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x22, 0xf8, 0x01, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x22, 0x1a, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x9d, 0x01, 0x0a,
	0x0d, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x1a, 0x58, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d,
	0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x10, 0x0a,
	0x0e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2a,
	0x7d, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x42, 0x84,
	0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x6b,
	0x2d, 0x69, 0x6f, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x73, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06,
	0x41, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x73,
	0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70,
	0xe8, 0x07,
})

var file_ast_v1_ast_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ast_v1_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_ast_v1_ast_proto_goTypes = []any{
	(CellAlignment)(0),             // 0: ast.v1.CellAlignment
	(Custom_RenderScope)(0),        // 1: ast.v1.Custom.RenderScope
	(*Node)(nil),                   // 2: ast.v1.Node
	(*Document)(nil),               // 3: ast.v1.Document
	(*Paragraph)(nil),              // 4: ast.v1.Paragraph
	(*Heading)(nil),                // 5: ast.v1.Heading
	(*ThematicBreak)(nil),          // 6: ast.v1.ThematicBreak
	(*CodeBlock)(nil),              // 7: ast.v1.CodeBlock
	(*Blockquote)(nil),             // 8: ast.v1.Blockquote
	(*List)(nil),                   // 9: ast.v1.List
	(*ListItem)(nil),               // 10: ast.v1.ListItem
	(*HTMLBlock)(nil),              // 11: ast.v1.HTMLBlock
	(*Text)(nil),                   // 12: ast.v1.Text
	(*CodeSpan)(nil),               // 13: ast.v1.CodeSpan
	(*Emphasis)(nil),               // 14: ast.v1.Emphasis
	(*Link)(nil),                   // 15: ast.v1.Link
	(*Image)(nil),                  // 16: ast.v1.Image
	(*AutoLink)(nil),               // 17: ast.v1.AutoLink
	(*HTMLInline)(nil),             // 18: ast.v1.HTMLInline
	(*Table)(nil),                  // 19: ast.v1.Table
	(*TableRow)(nil),               // 20: ast.v1.TableRow
	(*TableCell)(nil),              // 21: ast.v1.TableCell
	(*TaskCheckbox)(nil),           // 22: ast.v1.TaskCheckbox
	(*Strikethrough)(nil),          // 23: ast.v1.Strikethrough
	(*Custom)(nil),                 // 24: ast.v1.Custom
	(*Path)(nil),                   // 25: ast.v1.Path
	(*FabricContent)(nil),          // 26: ast.v1.FabricContent
	(*FabricSection)(nil),          // 27: ast.v1.FabricSection
	(*FabricDocument)(nil),         // 28: ast.v1.FabricDocument
	(*FabricContent_Metadata)(nil), // 29: ast.v1.FabricContent.Metadata
	(*anypb.Any)(nil),              // 30: google.protobuf.Any
}
var file_ast_v1_ast_proto_depIdxs = []int32{
	2,  // 0: ast.v1.Node.children:type_name -> ast.v1.Node
	4,  // 1: ast.v1.Node.paragraph:type_name -> ast.v1.Paragraph
	5,  // 2: ast.v1.Node.heading:type_name -> ast.v1.Heading
	6,  // 3: ast.v1.Node.thematic_break:type_name -> ast.v1.ThematicBreak
	7,  // 4: ast.v1.Node.code_block:type_name -> ast.v1.CodeBlock
	8,  // 5: ast.v1.Node.blockquote:type_name -> ast.v1.Blockquote
	9,  // 6: ast.v1.Node.list:type_name -> ast.v1.List
	10, // 7: ast.v1.Node.list_item:type_name -> ast.v1.ListItem
	11, // 8: ast.v1.Node.html_block:type_name -> ast.v1.HTMLBlock
	12, // 9: ast.v1.Node.text:type_name -> ast.v1.Text
	13, // 10: ast.v1.Node.code_span:type_name -> ast.v1.CodeSpan
	14, // 11: ast.v1.Node.emphasis:type_name -> ast.v1.Emphasis
	15, // 12: ast.v1.Node.link:type_name -> ast.v1.Link
	16, // 13: ast.v1.Node.image:type_name -> ast.v1.Image
	17, // 14: ast.v1.Node.auto_link:type_name -> ast.v1.AutoLink
	18, // 15: ast.v1.Node.html_inline:type_name -> ast.v1.HTMLInline
	19, // 16: ast.v1.Node.table:type_name -> ast.v1.Table
	20, // 17: ast.v1.Node.table_row:type_name -> ast.v1.TableRow
	21, // 18: ast.v1.Node.table_cell:type_name -> ast.v1.TableCell
	22, // 19: ast.v1.Node.task_checkbox:type_name -> ast.v1.TaskCheckbox
	23, // 20: ast.v1.Node.strikethrough:type_name -> ast.v1.Strikethrough
	28, // 21: ast.v1.Node.fabric_document:type_name -> ast.v1.FabricDocument
	27, // 22: ast.v1.Node.fabric_section:type_name -> ast.v1.FabricSection
	26, // 23: ast.v1.Node.fabric_content:type_name -> ast.v1.FabricContent
	24, // 24: ast.v1.Node.custom:type_name -> ast.v1.Custom
	0,  // 25: ast.v1.Table.alignments:type_name -> ast.v1.CellAlignment
	30, // 26: ast.v1.Custom.data:type_name -> google.protobuf.Any
	1,  // 27: ast.v1.Custom.scope:type_name -> ast.v1.Custom.RenderScope
	29, // 28: ast.v1.FabricContent.meta:type_name -> ast.v1.FabricContent.Metadata
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_ast_v1_ast_proto_init() }
func file_ast_v1_ast_proto_init() {
	if File_ast_v1_ast_proto != nil {
		return
	}
	file_ast_v1_ast_proto_msgTypes[0].OneofWrappers = []any{
		(*node_Paragraph)(nil),
		(*node_Heading)(nil),
		(*node_ThematicBreak)(nil),
		(*node_CodeBlock)(nil),
		(*node_Blockquote)(nil),
		(*node_List)(nil),
		(*node_ListItem)(nil),
		(*node_HtmlBlock)(nil),
		(*node_Text)(nil),
		(*node_CodeSpan)(nil),
		(*node_Emphasis)(nil),
		(*node_Link)(nil),
		(*node_Image)(nil),
		(*node_AutoLink)(nil),
		(*node_HtmlInline)(nil),
		(*node_Table)(nil),
		(*node_TableRow)(nil),
		(*node_TableCell)(nil),
		(*node_TaskCheckbox)(nil),
		(*node_Strikethrough)(nil),
		(*node_FabricDocument)(nil),
		(*node_FabricSection)(nil),
		(*node_FabricContent)(nil),
		(*node_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ast_v1_ast_proto_rawDesc), len(file_ast_v1_ast_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_v1_ast_proto_goTypes,
		DependencyIndexes: file_ast_v1_ast_proto_depIdxs,
		EnumInfos:         file_ast_v1_ast_proto_enumTypes,
		MessageInfos:      file_ast_v1_ast_proto_msgTypes,
	}.Build()
	File_ast_v1_ast_proto = out.File
	file_ast_v1_ast_proto_goTypes = nil
	file_ast_v1_ast_proto_depIdxs = nil
}
