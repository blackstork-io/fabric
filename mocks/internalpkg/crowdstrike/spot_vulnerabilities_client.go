// Code generated by mockery v2.52.2. DO NOT EDIT.

package crowdstrike_mocks

import (
	spotlight_vulnerabilities "github.com/crowdstrike/gofalcon/falcon/client/spotlight_vulnerabilities"
	mock "github.com/stretchr/testify/mock"
)

// SpotVulnerabilitiesClient is an autogenerated mock type for the SpotVulnerabilitiesClient type
type SpotVulnerabilitiesClient struct {
	mock.Mock
}

type SpotVulnerabilitiesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SpotVulnerabilitiesClient) EXPECT() *SpotVulnerabilitiesClient_Expecter {
	return &SpotVulnerabilitiesClient_Expecter{mock: &_m.Mock}
}

// CombinedQueryVulnerabilities provides a mock function with given fields: params, opts
func (_m *SpotVulnerabilitiesClient) CombinedQueryVulnerabilities(params *spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams, opts ...spotlight_vulnerabilities.ClientOption) (*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CombinedQueryVulnerabilities")
	}

	var r0 *spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams, ...spotlight_vulnerabilities.ClientOption) (*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams, ...spotlight_vulnerabilities.ClientOption) *spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams, ...spotlight_vulnerabilities.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CombinedQueryVulnerabilities'
type SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call struct {
	*mock.Call
}

// CombinedQueryVulnerabilities is a helper method to define mock.On call
//   - params *spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams
//   - opts ...spotlight_vulnerabilities.ClientOption
func (_e *SpotVulnerabilitiesClient_Expecter) CombinedQueryVulnerabilities(params interface{}, opts ...interface{}) *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call {
	return &SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call{Call: _e.mock.On("CombinedQueryVulnerabilities",
		append([]interface{}{params}, opts...)...)}
}

func (_c *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call) Run(run func(params *spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams, opts ...spotlight_vulnerabilities.ClientOption)) *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]spotlight_vulnerabilities.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(spotlight_vulnerabilities.ClientOption)
			}
		}
		run(args[0].(*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams), variadicArgs...)
	})
	return _c
}

func (_c *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call) Return(_a0 *spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK, _a1 error) *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call) RunAndReturn(run func(*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesParams, ...spotlight_vulnerabilities.ClientOption) (*spotlight_vulnerabilities.CombinedQueryVulnerabilitiesOK, error)) *SpotVulnerabilitiesClient_CombinedQueryVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// NewSpotVulnerabilitiesClient creates a new instance of SpotVulnerabilitiesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpotVulnerabilitiesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpotVulnerabilitiesClient {
	mock := &SpotVulnerabilitiesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
