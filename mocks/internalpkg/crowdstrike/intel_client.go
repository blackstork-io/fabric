// Code generated by mockery v2.52.2. DO NOT EDIT.

package crowdstrike_mocks

import (
	intel "github.com/crowdstrike/gofalcon/falcon/client/intel"
	mock "github.com/stretchr/testify/mock"
)

// IntelClient is an autogenerated mock type for the IntelClient type
type IntelClient struct {
	mock.Mock
}

type IntelClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IntelClient) EXPECT() *IntelClient_Expecter {
	return &IntelClient_Expecter{mock: &_m.Mock}
}

// QueryIntelIndicatorEntities provides a mock function with given fields: params, opts
func (_m *IntelClient) QueryIntelIndicatorEntities(params *intel.QueryIntelIndicatorEntitiesParams, opts ...intel.ClientOption) (*intel.QueryIntelIndicatorEntitiesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryIntelIndicatorEntities")
	}

	var r0 *intel.QueryIntelIndicatorEntitiesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*intel.QueryIntelIndicatorEntitiesParams, ...intel.ClientOption) (*intel.QueryIntelIndicatorEntitiesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*intel.QueryIntelIndicatorEntitiesParams, ...intel.ClientOption) *intel.QueryIntelIndicatorEntitiesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*intel.QueryIntelIndicatorEntitiesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*intel.QueryIntelIndicatorEntitiesParams, ...intel.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntelClient_QueryIntelIndicatorEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryIntelIndicatorEntities'
type IntelClient_QueryIntelIndicatorEntities_Call struct {
	*mock.Call
}

// QueryIntelIndicatorEntities is a helper method to define mock.On call
//   - params *intel.QueryIntelIndicatorEntitiesParams
//   - opts ...intel.ClientOption
func (_e *IntelClient_Expecter) QueryIntelIndicatorEntities(params interface{}, opts ...interface{}) *IntelClient_QueryIntelIndicatorEntities_Call {
	return &IntelClient_QueryIntelIndicatorEntities_Call{Call: _e.mock.On("QueryIntelIndicatorEntities",
		append([]interface{}{params}, opts...)...)}
}

func (_c *IntelClient_QueryIntelIndicatorEntities_Call) Run(run func(params *intel.QueryIntelIndicatorEntitiesParams, opts ...intel.ClientOption)) *IntelClient_QueryIntelIndicatorEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]intel.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(intel.ClientOption)
			}
		}
		run(args[0].(*intel.QueryIntelIndicatorEntitiesParams), variadicArgs...)
	})
	return _c
}

func (_c *IntelClient_QueryIntelIndicatorEntities_Call) Return(_a0 *intel.QueryIntelIndicatorEntitiesOK, _a1 error) *IntelClient_QueryIntelIndicatorEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntelClient_QueryIntelIndicatorEntities_Call) RunAndReturn(run func(*intel.QueryIntelIndicatorEntitiesParams, ...intel.ClientOption) (*intel.QueryIntelIndicatorEntitiesOK, error)) *IntelClient_QueryIntelIndicatorEntities_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntelClient creates a new instance of IntelClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntelClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntelClient {
	mock := &IntelClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
