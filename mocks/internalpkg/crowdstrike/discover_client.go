// Code generated by mockery v2.42.1. DO NOT EDIT.

package crowdstrike_mocks

import (
	discover "github.com/crowdstrike/gofalcon/falcon/client/discover"
	mock "github.com/stretchr/testify/mock"
)

// DiscoverClient is an autogenerated mock type for the DiscoverClient type
type DiscoverClient struct {
	mock.Mock
}

type DiscoverClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoverClient) EXPECT() *DiscoverClient_Expecter {
	return &DiscoverClient_Expecter{mock: &_m.Mock}
}

// GetHosts provides a mock function with given fields: params, opts
func (_m *DiscoverClient) GetHosts(params *discover.GetHostsParams, opts ...discover.ClientOption) (*discover.GetHostsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHosts")
	}

	var r0 *discover.GetHostsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*discover.GetHostsParams, ...discover.ClientOption) (*discover.GetHostsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*discover.GetHostsParams, ...discover.ClientOption) *discover.GetHostsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discover.GetHostsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*discover.GetHostsParams, ...discover.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverClient_GetHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHosts'
type DiscoverClient_GetHosts_Call struct {
	*mock.Call
}

// GetHosts is a helper method to define mock.On call
//   - params *discover.GetHostsParams
//   - opts ...discover.ClientOption
func (_e *DiscoverClient_Expecter) GetHosts(params interface{}, opts ...interface{}) *DiscoverClient_GetHosts_Call {
	return &DiscoverClient_GetHosts_Call{Call: _e.mock.On("GetHosts",
		append([]interface{}{params}, opts...)...)}
}

func (_c *DiscoverClient_GetHosts_Call) Run(run func(params *discover.GetHostsParams, opts ...discover.ClientOption)) *DiscoverClient_GetHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]discover.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(discover.ClientOption)
			}
		}
		run(args[0].(*discover.GetHostsParams), variadicArgs...)
	})
	return _c
}

func (_c *DiscoverClient_GetHosts_Call) Return(_a0 *discover.GetHostsOK, _a1 error) *DiscoverClient_GetHosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoverClient_GetHosts_Call) RunAndReturn(run func(*discover.GetHostsParams, ...discover.ClientOption) (*discover.GetHostsOK, error)) *DiscoverClient_GetHosts_Call {
	_c.Call.Return(run)
	return _c
}

// QueryHosts provides a mock function with given fields: params, opts
func (_m *DiscoverClient) QueryHosts(params *discover.QueryHostsParams, opts ...discover.ClientOption) (*discover.QueryHostsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryHosts")
	}

	var r0 *discover.QueryHostsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*discover.QueryHostsParams, ...discover.ClientOption) (*discover.QueryHostsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*discover.QueryHostsParams, ...discover.ClientOption) *discover.QueryHostsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discover.QueryHostsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*discover.QueryHostsParams, ...discover.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverClient_QueryHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryHosts'
type DiscoverClient_QueryHosts_Call struct {
	*mock.Call
}

// QueryHosts is a helper method to define mock.On call
//   - params *discover.QueryHostsParams
//   - opts ...discover.ClientOption
func (_e *DiscoverClient_Expecter) QueryHosts(params interface{}, opts ...interface{}) *DiscoverClient_QueryHosts_Call {
	return &DiscoverClient_QueryHosts_Call{Call: _e.mock.On("QueryHosts",
		append([]interface{}{params}, opts...)...)}
}

func (_c *DiscoverClient_QueryHosts_Call) Run(run func(params *discover.QueryHostsParams, opts ...discover.ClientOption)) *DiscoverClient_QueryHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]discover.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(discover.ClientOption)
			}
		}
		run(args[0].(*discover.QueryHostsParams), variadicArgs...)
	})
	return _c
}

func (_c *DiscoverClient_QueryHosts_Call) Return(_a0 *discover.QueryHostsOK, _a1 error) *DiscoverClient_QueryHosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoverClient_QueryHosts_Call) RunAndReturn(run func(*discover.QueryHostsParams, ...discover.ClientOption) (*discover.QueryHostsOK, error)) *DiscoverClient_QueryHosts_Call {
	_c.Call.Return(run)
	return _c
}

// NewDiscoverClient creates a new instance of DiscoverClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoverClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoverClient {
	mock := &DiscoverClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
