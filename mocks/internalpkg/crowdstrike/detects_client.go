// Code generated by mockery v2.52.2. DO NOT EDIT.

package crowdstrike_mocks

import (
	detects "github.com/crowdstrike/gofalcon/falcon/client/detects"
	mock "github.com/stretchr/testify/mock"
)

// DetectsClient is an autogenerated mock type for the DetectsClient type
type DetectsClient struct {
	mock.Mock
}

type DetectsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DetectsClient) EXPECT() *DetectsClient_Expecter {
	return &DetectsClient_Expecter{mock: &_m.Mock}
}

// GetDetectSummaries provides a mock function with given fields: params, opts
func (_m *DetectsClient) GetDetectSummaries(params *detects.GetDetectSummariesParams, opts ...detects.ClientOption) (*detects.GetDetectSummariesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDetectSummaries")
	}

	var r0 *detects.GetDetectSummariesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*detects.GetDetectSummariesParams, ...detects.ClientOption) (*detects.GetDetectSummariesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*detects.GetDetectSummariesParams, ...detects.ClientOption) *detects.GetDetectSummariesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detects.GetDetectSummariesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*detects.GetDetectSummariesParams, ...detects.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetectsClient_GetDetectSummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetectSummaries'
type DetectsClient_GetDetectSummaries_Call struct {
	*mock.Call
}

// GetDetectSummaries is a helper method to define mock.On call
//   - params *detects.GetDetectSummariesParams
//   - opts ...detects.ClientOption
func (_e *DetectsClient_Expecter) GetDetectSummaries(params interface{}, opts ...interface{}) *DetectsClient_GetDetectSummaries_Call {
	return &DetectsClient_GetDetectSummaries_Call{Call: _e.mock.On("GetDetectSummaries",
		append([]interface{}{params}, opts...)...)}
}

func (_c *DetectsClient_GetDetectSummaries_Call) Run(run func(params *detects.GetDetectSummariesParams, opts ...detects.ClientOption)) *DetectsClient_GetDetectSummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]detects.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(detects.ClientOption)
			}
		}
		run(args[0].(*detects.GetDetectSummariesParams), variadicArgs...)
	})
	return _c
}

func (_c *DetectsClient_GetDetectSummaries_Call) Return(_a0 *detects.GetDetectSummariesOK, _a1 error) *DetectsClient_GetDetectSummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DetectsClient_GetDetectSummaries_Call) RunAndReturn(run func(*detects.GetDetectSummariesParams, ...detects.ClientOption) (*detects.GetDetectSummariesOK, error)) *DetectsClient_GetDetectSummaries_Call {
	_c.Call.Return(run)
	return _c
}

// QueryDetects provides a mock function with given fields: params, opts
func (_m *DetectsClient) QueryDetects(params *detects.QueryDetectsParams, opts ...detects.ClientOption) (*detects.QueryDetectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryDetects")
	}

	var r0 *detects.QueryDetectsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*detects.QueryDetectsParams, ...detects.ClientOption) (*detects.QueryDetectsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*detects.QueryDetectsParams, ...detects.ClientOption) *detects.QueryDetectsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detects.QueryDetectsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*detects.QueryDetectsParams, ...detects.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetectsClient_QueryDetects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryDetects'
type DetectsClient_QueryDetects_Call struct {
	*mock.Call
}

// QueryDetects is a helper method to define mock.On call
//   - params *detects.QueryDetectsParams
//   - opts ...detects.ClientOption
func (_e *DetectsClient_Expecter) QueryDetects(params interface{}, opts ...interface{}) *DetectsClient_QueryDetects_Call {
	return &DetectsClient_QueryDetects_Call{Call: _e.mock.On("QueryDetects",
		append([]interface{}{params}, opts...)...)}
}

func (_c *DetectsClient_QueryDetects_Call) Run(run func(params *detects.QueryDetectsParams, opts ...detects.ClientOption)) *DetectsClient_QueryDetects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]detects.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(detects.ClientOption)
			}
		}
		run(args[0].(*detects.QueryDetectsParams), variadicArgs...)
	})
	return _c
}

func (_c *DetectsClient_QueryDetects_Call) Return(_a0 *detects.QueryDetectsOK, _a1 error) *DetectsClient_QueryDetects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DetectsClient_QueryDetects_Call) RunAndReturn(run func(*detects.QueryDetectsParams, ...detects.ClientOption) (*detects.QueryDetectsOK, error)) *DetectsClient_QueryDetects_Call {
	_c.Call.Return(run)
	return _c
}

// NewDetectsClient creates a new instance of DetectsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDetectsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DetectsClient {
	mock := &DetectsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
