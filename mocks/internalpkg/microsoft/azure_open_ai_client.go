// Code generated by mockery v2.42.1. DO NOT EDIT.

package microsoft_mocks

import (
	context "context"

	azopenai "github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai"

	mock "github.com/stretchr/testify/mock"
)

// AzureOpenAIClient is an autogenerated mock type for the AzureOpenAIClient type
type AzureOpenAIClient struct {
	mock.Mock
}

type AzureOpenAIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AzureOpenAIClient) EXPECT() *AzureOpenAIClient_Expecter {
	return &AzureOpenAIClient_Expecter{mock: &_m.Mock}
}

// GetCompletions provides a mock function with given fields: ctx, body, options
func (_m *AzureOpenAIClient) GetCompletions(ctx context.Context, body azopenai.CompletionsOptions, options *azopenai.GetCompletionsOptions) (azopenai.GetCompletionsResponse, error) {
	ret := _m.Called(ctx, body, options)

	if len(ret) == 0 {
		panic("no return value specified for GetCompletions")
	}

	var r0 azopenai.GetCompletionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, azopenai.CompletionsOptions, *azopenai.GetCompletionsOptions) (azopenai.GetCompletionsResponse, error)); ok {
		return rf(ctx, body, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, azopenai.CompletionsOptions, *azopenai.GetCompletionsOptions) azopenai.GetCompletionsResponse); ok {
		r0 = rf(ctx, body, options)
	} else {
		r0 = ret.Get(0).(azopenai.GetCompletionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, azopenai.CompletionsOptions, *azopenai.GetCompletionsOptions) error); ok {
		r1 = rf(ctx, body, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AzureOpenAIClient_GetCompletions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompletions'
type AzureOpenAIClient_GetCompletions_Call struct {
	*mock.Call
}

// GetCompletions is a helper method to define mock.On call
//   - ctx context.Context
//   - body azopenai.CompletionsOptions
//   - options *azopenai.GetCompletionsOptions
func (_e *AzureOpenAIClient_Expecter) GetCompletions(ctx interface{}, body interface{}, options interface{}) *AzureOpenAIClient_GetCompletions_Call {
	return &AzureOpenAIClient_GetCompletions_Call{Call: _e.mock.On("GetCompletions", ctx, body, options)}
}

func (_c *AzureOpenAIClient_GetCompletions_Call) Run(run func(ctx context.Context, body azopenai.CompletionsOptions, options *azopenai.GetCompletionsOptions)) *AzureOpenAIClient_GetCompletions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(azopenai.CompletionsOptions), args[2].(*azopenai.GetCompletionsOptions))
	})
	return _c
}

func (_c *AzureOpenAIClient_GetCompletions_Call) Return(_a0 azopenai.GetCompletionsResponse, _a1 error) *AzureOpenAIClient_GetCompletions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AzureOpenAIClient_GetCompletions_Call) RunAndReturn(run func(context.Context, azopenai.CompletionsOptions, *azopenai.GetCompletionsOptions) (azopenai.GetCompletionsResponse, error)) *AzureOpenAIClient_GetCompletions_Call {
	_c.Call.Return(run)
	return _c
}

// NewAzureOpenAIClient creates a new instance of AzureOpenAIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAzureOpenAIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AzureOpenAIClient {
	mock := &AzureOpenAIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
