// Code generated by mockery v2.52.2. DO NOT EDIT.

package microsoft_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	plugindata "github.com/blackstork-io/fabric/plugin/plugindata"

	url "net/url"
)

// MicrosoftSecurityClient is an autogenerated mock type for the MicrosoftSecurityClient type
type MicrosoftSecurityClient struct {
	mock.Mock
}

type MicrosoftSecurityClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MicrosoftSecurityClient) EXPECT() *MicrosoftSecurityClient_Expecter {
	return &MicrosoftSecurityClient_Expecter{mock: &_m.Mock}
}

// QueryObject provides a mock function with given fields: ctx, endpoint, queryParams
func (_m *MicrosoftSecurityClient) QueryObject(ctx context.Context, endpoint string, queryParams url.Values) (plugindata.Data, error) {
	ret := _m.Called(ctx, endpoint, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for QueryObject")
	}

	var r0 plugindata.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values) (plugindata.Data, error)); ok {
		return rf(ctx, endpoint, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values) plugindata.Data); ok {
		r0 = rf(ctx, endpoint, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugindata.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values) error); ok {
		r1 = rf(ctx, endpoint, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MicrosoftSecurityClient_QueryObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryObject'
type MicrosoftSecurityClient_QueryObject_Call struct {
	*mock.Call
}

// QueryObject is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - queryParams url.Values
func (_e *MicrosoftSecurityClient_Expecter) QueryObject(ctx interface{}, endpoint interface{}, queryParams interface{}) *MicrosoftSecurityClient_QueryObject_Call {
	return &MicrosoftSecurityClient_QueryObject_Call{Call: _e.mock.On("QueryObject", ctx, endpoint, queryParams)}
}

func (_c *MicrosoftSecurityClient_QueryObject_Call) Run(run func(ctx context.Context, endpoint string, queryParams url.Values)) *MicrosoftSecurityClient_QueryObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(url.Values))
	})
	return _c
}

func (_c *MicrosoftSecurityClient_QueryObject_Call) Return(object plugindata.Data, err error) *MicrosoftSecurityClient_QueryObject_Call {
	_c.Call.Return(object, err)
	return _c
}

func (_c *MicrosoftSecurityClient_QueryObject_Call) RunAndReturn(run func(context.Context, string, url.Values) (plugindata.Data, error)) *MicrosoftSecurityClient_QueryObject_Call {
	_c.Call.Return(run)
	return _c
}

// QueryObjects provides a mock function with given fields: ctx, endpoint, queryParams, size
func (_m *MicrosoftSecurityClient) QueryObjects(ctx context.Context, endpoint string, queryParams url.Values, size int) (plugindata.List, error) {
	ret := _m.Called(ctx, endpoint, queryParams, size)

	if len(ret) == 0 {
		panic("no return value specified for QueryObjects")
	}

	var r0 plugindata.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values, int) (plugindata.List, error)); ok {
		return rf(ctx, endpoint, queryParams, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values, int) plugindata.List); ok {
		r0 = rf(ctx, endpoint, queryParams, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugindata.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values, int) error); ok {
		r1 = rf(ctx, endpoint, queryParams, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MicrosoftSecurityClient_QueryObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryObjects'
type MicrosoftSecurityClient_QueryObjects_Call struct {
	*mock.Call
}

// QueryObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - queryParams url.Values
//   - size int
func (_e *MicrosoftSecurityClient_Expecter) QueryObjects(ctx interface{}, endpoint interface{}, queryParams interface{}, size interface{}) *MicrosoftSecurityClient_QueryObjects_Call {
	return &MicrosoftSecurityClient_QueryObjects_Call{Call: _e.mock.On("QueryObjects", ctx, endpoint, queryParams, size)}
}

func (_c *MicrosoftSecurityClient_QueryObjects_Call) Run(run func(ctx context.Context, endpoint string, queryParams url.Values, size int)) *MicrosoftSecurityClient_QueryObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(url.Values), args[3].(int))
	})
	return _c
}

func (_c *MicrosoftSecurityClient_QueryObjects_Call) Return(objects plugindata.List, err error) *MicrosoftSecurityClient_QueryObjects_Call {
	_c.Call.Return(objects, err)
	return _c
}

func (_c *MicrosoftSecurityClient_QueryObjects_Call) RunAndReturn(run func(context.Context, string, url.Values, int) (plugindata.List, error)) *MicrosoftSecurityClient_QueryObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RunAdvancedQuery provides a mock function with given fields: ctx, query
func (_m *MicrosoftSecurityClient) RunAdvancedQuery(ctx context.Context, query string) (plugindata.Data, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for RunAdvancedQuery")
	}

	var r0 plugindata.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (plugindata.Data, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) plugindata.Data); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugindata.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MicrosoftSecurityClient_RunAdvancedQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunAdvancedQuery'
type MicrosoftSecurityClient_RunAdvancedQuery_Call struct {
	*mock.Call
}

// RunAdvancedQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *MicrosoftSecurityClient_Expecter) RunAdvancedQuery(ctx interface{}, query interface{}) *MicrosoftSecurityClient_RunAdvancedQuery_Call {
	return &MicrosoftSecurityClient_RunAdvancedQuery_Call{Call: _e.mock.On("RunAdvancedQuery", ctx, query)}
}

func (_c *MicrosoftSecurityClient_RunAdvancedQuery_Call) Run(run func(ctx context.Context, query string)) *MicrosoftSecurityClient_RunAdvancedQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MicrosoftSecurityClient_RunAdvancedQuery_Call) Return(object plugindata.Data, err error) *MicrosoftSecurityClient_RunAdvancedQuery_Call {
	_c.Call.Return(object, err)
	return _c
}

func (_c *MicrosoftSecurityClient_RunAdvancedQuery_Call) RunAndReturn(run func(context.Context, string) (plugindata.Data, error)) *MicrosoftSecurityClient_RunAdvancedQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewMicrosoftSecurityClient creates a new instance of MicrosoftSecurityClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMicrosoftSecurityClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MicrosoftSecurityClient {
	mock := &MicrosoftSecurityClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
