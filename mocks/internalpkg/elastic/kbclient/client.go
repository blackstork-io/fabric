// Code generated by mockery v2.42.1. DO NOT EDIT.

package kbclient_mocks

import (
	context "context"

	kbclient "github.com/blackstork-io/fabric/internal/elastic/kbclient"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// ListSecurityCases provides a mock function with given fields: ctx, req
func (_m *Client) ListSecurityCases(ctx context.Context, req *kbclient.ListSecurityCasesReq) (*kbclient.ListSecurityCasesRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityCases")
	}

	var r0 *kbclient.ListSecurityCasesRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kbclient.ListSecurityCasesReq) (*kbclient.ListSecurityCasesRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kbclient.ListSecurityCasesReq) *kbclient.ListSecurityCasesRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kbclient.ListSecurityCasesRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kbclient.ListSecurityCasesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListSecurityCases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityCases'
type Client_ListSecurityCases_Call struct {
	*mock.Call
}

// ListSecurityCases is a helper method to define mock.On call
//   - ctx context.Context
//   - req *kbclient.ListSecurityCasesReq
func (_e *Client_Expecter) ListSecurityCases(ctx interface{}, req interface{}) *Client_ListSecurityCases_Call {
	return &Client_ListSecurityCases_Call{Call: _e.mock.On("ListSecurityCases", ctx, req)}
}

func (_c *Client_ListSecurityCases_Call) Run(run func(ctx context.Context, req *kbclient.ListSecurityCasesReq)) *Client_ListSecurityCases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*kbclient.ListSecurityCasesReq))
	})
	return _c
}

func (_c *Client_ListSecurityCases_Call) Return(_a0 *kbclient.ListSecurityCasesRes, _a1 error) *Client_ListSecurityCases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListSecurityCases_Call) RunAndReturn(run func(context.Context, *kbclient.ListSecurityCasesReq) (*kbclient.ListSecurityCasesRes, error)) *Client_ListSecurityCases_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
