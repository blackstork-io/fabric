// Code generated by mockery v2.42.1. DO NOT EDIT.

package github_mocks

import (
	github "github.com/blackstork-io/fabric/internal/github"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Gists provides a mock function with given fields:
func (_m *Client) Gists() github.GistClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Gists")
	}

	var r0 github.GistClient
	if rf, ok := ret.Get(0).(func() github.GistClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(github.GistClient)
		}
	}

	return r0
}

// Client_Gists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gists'
type Client_Gists_Call struct {
	*mock.Call
}

// Gists is a helper method to define mock.On call
func (_e *Client_Expecter) Gists() *Client_Gists_Call {
	return &Client_Gists_Call{Call: _e.mock.On("Gists")}
}

func (_c *Client_Gists_Call) Run(run func()) *Client_Gists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Gists_Call) Return(_a0 github.GistClient) *Client_Gists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Gists_Call) RunAndReturn(run func() github.GistClient) *Client_Gists_Call {
	_c.Call.Return(run)
	return _c
}

// Issues provides a mock function with given fields:
func (_m *Client) Issues() github.IssuesClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Issues")
	}

	var r0 github.IssuesClient
	if rf, ok := ret.Get(0).(func() github.IssuesClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(github.IssuesClient)
		}
	}

	return r0
}

// Client_Issues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issues'
type Client_Issues_Call struct {
	*mock.Call
}

// Issues is a helper method to define mock.On call
func (_e *Client_Expecter) Issues() *Client_Issues_Call {
	return &Client_Issues_Call{Call: _e.mock.On("Issues")}
}

func (_c *Client_Issues_Call) Run(run func()) *Client_Issues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Issues_Call) Return(_a0 github.IssuesClient) *Client_Issues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Issues_Call) RunAndReturn(run func() github.IssuesClient) *Client_Issues_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
