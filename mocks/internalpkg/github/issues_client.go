// Code generated by mockery v2.42.1. DO NOT EDIT.

package github_mocks

import (
	context "context"

	github "github.com/google/go-github/v58/github"

	mock "github.com/stretchr/testify/mock"
)

// IssuesClient is an autogenerated mock type for the IssuesClient type
type IssuesClient struct {
	mock.Mock
}

type IssuesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IssuesClient) EXPECT() *IssuesClient_Expecter {
	return &IssuesClient_Expecter{mock: &_m.Mock}
}

// ListByRepo provides a mock function with given fields: ctx, owner, repo, opts
func (_m *IssuesClient) ListByRepo(ctx context.Context, owner string, repo string, opts *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListByRepo")
	}

	var r0 []*github.Issue
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error)); ok {
		return rf(ctx, owner, repo, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.IssueListByRepoOptions) []*github.Issue); ok {
		r0 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.IssueListByRepoOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.IssueListByRepoOptions) error); ok {
		r2 = rf(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesClient_ListByRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByRepo'
type IssuesClient_ListByRepo_Call struct {
	*mock.Call
}

// ListByRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - opts *github.IssueListByRepoOptions
func (_e *IssuesClient_Expecter) ListByRepo(ctx interface{}, owner interface{}, repo interface{}, opts interface{}) *IssuesClient_ListByRepo_Call {
	return &IssuesClient_ListByRepo_Call{Call: _e.mock.On("ListByRepo", ctx, owner, repo, opts)}
}

func (_c *IssuesClient_ListByRepo_Call) Run(run func(ctx context.Context, owner string, repo string, opts *github.IssueListByRepoOptions)) *IssuesClient_ListByRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*github.IssueListByRepoOptions))
	})
	return _c
}

func (_c *IssuesClient_ListByRepo_Call) Return(_a0 []*github.Issue, _a1 *github.Response, _a2 error) *IssuesClient_ListByRepo_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssuesClient_ListByRepo_Call) RunAndReturn(run func(context.Context, string, string, *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error)) *IssuesClient_ListByRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewIssuesClient creates a new instance of IssuesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssuesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IssuesClient {
	mock := &IssuesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
