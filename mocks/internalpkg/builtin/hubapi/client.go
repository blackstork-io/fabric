// Code generated by mockery v2.42.1. DO NOT EDIT.

package hubapi_mocks

import (
	context "context"

	hubapi "github.com/blackstork-io/fabric/internal/builtin/hubapi"
	mock "github.com/stretchr/testify/mock"

	pluginapiv1 "github.com/blackstork-io/fabric/plugin/pluginapi/v1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateDocument provides a mock function with given fields: ctx, params
func (_m *Client) CreateDocument(ctx context.Context, params *hubapi.DocumentParams) (*hubapi.Document, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateDocument")
	}

	var r0 *hubapi.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *hubapi.DocumentParams) (*hubapi.Document, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hubapi.DocumentParams) *hubapi.Document); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hubapi.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hubapi.DocumentParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDocument'
type Client_CreateDocument_Call struct {
	*mock.Call
}

// CreateDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - params *hubapi.DocumentParams
func (_e *Client_Expecter) CreateDocument(ctx interface{}, params interface{}) *Client_CreateDocument_Call {
	return &Client_CreateDocument_Call{Call: _e.mock.On("CreateDocument", ctx, params)}
}

func (_c *Client_CreateDocument_Call) Run(run func(ctx context.Context, params *hubapi.DocumentParams)) *Client_CreateDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hubapi.DocumentParams))
	})
	return _c
}

func (_c *Client_CreateDocument_Call) Return(_a0 *hubapi.Document, _a1 error) *Client_CreateDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateDocument_Call) RunAndReturn(run func(context.Context, *hubapi.DocumentParams) (*hubapi.Document, error)) *Client_CreateDocument_Call {
	_c.Call.Return(run)
	return _c
}

// UploadDocumentContent provides a mock function with given fields: ctx, documentID, content
func (_m *Client) UploadDocumentContent(ctx context.Context, documentID string, content *pluginapiv1.Content) (*hubapi.DocumentContent, error) {
	ret := _m.Called(ctx, documentID, content)

	if len(ret) == 0 {
		panic("no return value specified for UploadDocumentContent")
	}

	var r0 *hubapi.DocumentContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *pluginapiv1.Content) (*hubapi.DocumentContent, error)); ok {
		return rf(ctx, documentID, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *pluginapiv1.Content) *hubapi.DocumentContent); ok {
		r0 = rf(ctx, documentID, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hubapi.DocumentContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *pluginapiv1.Content) error); ok {
		r1 = rf(ctx, documentID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UploadDocumentContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadDocumentContent'
type Client_UploadDocumentContent_Call struct {
	*mock.Call
}

// UploadDocumentContent is a helper method to define mock.On call
//   - ctx context.Context
//   - documentID string
//   - content *pluginapiv1.Content
func (_e *Client_Expecter) UploadDocumentContent(ctx interface{}, documentID interface{}, content interface{}) *Client_UploadDocumentContent_Call {
	return &Client_UploadDocumentContent_Call{Call: _e.mock.On("UploadDocumentContent", ctx, documentID, content)}
}

func (_c *Client_UploadDocumentContent_Call) Run(run func(ctx context.Context, documentID string, content *pluginapiv1.Content)) *Client_UploadDocumentContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*pluginapiv1.Content))
	})
	return _c
}

func (_c *Client_UploadDocumentContent_Call) Return(_a0 *hubapi.DocumentContent, _a1 error) *Client_UploadDocumentContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UploadDocumentContent_Call) RunAndReturn(run func(context.Context, string, *pluginapiv1.Content) (*hubapi.DocumentContent, error)) *Client_UploadDocumentContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
