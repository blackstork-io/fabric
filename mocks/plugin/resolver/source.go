// Code generated by mockery v2.42.0. DO NOT EDIT.

package resolver_mocks

import (
	context "context"

	resolver "github.com/blackstork-io/fabric/plugin/resolver"
	mock "github.com/stretchr/testify/mock"
)

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

type Source_Expecter struct {
	mock *mock.Mock
}

func (_m *Source) EXPECT() *Source_Expecter {
	return &Source_Expecter{mock: &_m.Mock}
}

// Lookup provides a mock function with given fields: ctx, name
func (_m *Source) Lookup(ctx context.Context, name resolver.Name) ([]resolver.Version, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 []resolver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resolver.Name) ([]resolver.Version, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resolver.Name) []resolver.Version); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resolver.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resolver.Name) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Source_Lookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lookup'
type Source_Lookup_Call struct {
	*mock.Call
}

// Lookup is a helper method to define mock.On call
//   - ctx context.Context
//   - name resolver.Name
func (_e *Source_Expecter) Lookup(ctx interface{}, name interface{}) *Source_Lookup_Call {
	return &Source_Lookup_Call{Call: _e.mock.On("Lookup", ctx, name)}
}

func (_c *Source_Lookup_Call) Run(run func(ctx context.Context, name resolver.Name)) *Source_Lookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resolver.Name))
	})
	return _c
}

func (_c *Source_Lookup_Call) Return(_a0 []resolver.Version, _a1 error) *Source_Lookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Source_Lookup_Call) RunAndReturn(run func(context.Context, resolver.Name) ([]resolver.Version, error)) *Source_Lookup_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function with given fields: ctx, name, version, checksums
func (_m *Source) Resolve(ctx context.Context, name resolver.Name, version resolver.Version, checksums []resolver.Checksum) (*resolver.ResolvedPlugin, error) {
	ret := _m.Called(ctx, name, version, checksums)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *resolver.ResolvedPlugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resolver.Name, resolver.Version, []resolver.Checksum) (*resolver.ResolvedPlugin, error)); ok {
		return rf(ctx, name, version, checksums)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resolver.Name, resolver.Version, []resolver.Checksum) *resolver.ResolvedPlugin); ok {
		r0 = rf(ctx, name, version, checksums)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.ResolvedPlugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resolver.Name, resolver.Version, []resolver.Checksum) error); ok {
		r1 = rf(ctx, name, version, checksums)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Source_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type Source_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
//   - name resolver.Name
//   - version resolver.Version
//   - checksums []resolver.Checksum
func (_e *Source_Expecter) Resolve(ctx interface{}, name interface{}, version interface{}, checksums interface{}) *Source_Resolve_Call {
	return &Source_Resolve_Call{Call: _e.mock.On("Resolve", ctx, name, version, checksums)}
}

func (_c *Source_Resolve_Call) Run(run func(ctx context.Context, name resolver.Name, version resolver.Version, checksums []resolver.Checksum)) *Source_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resolver.Name), args[2].(resolver.Version), args[3].([]resolver.Checksum))
	})
	return _c
}

func (_c *Source_Resolve_Call) Return(_a0 *resolver.ResolvedPlugin, _a1 error) *Source_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Source_Resolve_Call) RunAndReturn(run func(context.Context, resolver.Name, resolver.Version, []resolver.Checksum) (*resolver.ResolvedPlugin, error)) *Source_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// NewSource creates a new instance of Source. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *Source {
	mock := &Source{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
