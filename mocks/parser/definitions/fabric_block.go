// Code generated by mockery v2.40.3. DO NOT EDIT.

package definitions_mocks

import (
	cty "github.com/zclconf/go-cty/cty"

	hcl "github.com/hashicorp/hcl/v2"

	mock "github.com/stretchr/testify/mock"
)

// FabricBlock is an autogenerated mock type for the FabricBlock type
type FabricBlock struct {
	mock.Mock
}

type FabricBlock_Expecter struct {
	mock *mock.Mock
}

func (_m *FabricBlock) EXPECT() *FabricBlock_Expecter {
	return &FabricBlock_Expecter{mock: &_m.Mock}
}

// CtyType provides a mock function with given fields:
func (_m *FabricBlock) CtyType() cty.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CtyType")
	}

	var r0 cty.Type
	if rf, ok := ret.Get(0).(func() cty.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cty.Type)
	}

	return r0
}

// FabricBlock_CtyType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CtyType'
type FabricBlock_CtyType_Call struct {
	*mock.Call
}

// CtyType is a helper method to define mock.On call
func (_e *FabricBlock_Expecter) CtyType() *FabricBlock_CtyType_Call {
	return &FabricBlock_CtyType_Call{Call: _e.mock.On("CtyType")}
}

func (_c *FabricBlock_CtyType_Call) Run(run func()) *FabricBlock_CtyType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FabricBlock_CtyType_Call) Return(_a0 cty.Type) *FabricBlock_CtyType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FabricBlock_CtyType_Call) RunAndReturn(run func() cty.Type) *FabricBlock_CtyType_Call {
	_c.Call.Return(run)
	return _c
}

// GetHCLBlock provides a mock function with given fields:
func (_m *FabricBlock) GetHCLBlock() *hcl.Block {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHCLBlock")
	}

	var r0 *hcl.Block
	if rf, ok := ret.Get(0).(func() *hcl.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcl.Block)
		}
	}

	return r0
}

// FabricBlock_GetHCLBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHCLBlock'
type FabricBlock_GetHCLBlock_Call struct {
	*mock.Call
}

// GetHCLBlock is a helper method to define mock.On call
func (_e *FabricBlock_Expecter) GetHCLBlock() *FabricBlock_GetHCLBlock_Call {
	return &FabricBlock_GetHCLBlock_Call{Call: _e.mock.On("GetHCLBlock")}
}

func (_c *FabricBlock_GetHCLBlock_Call) Run(run func()) *FabricBlock_GetHCLBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FabricBlock_GetHCLBlock_Call) Return(_a0 *hcl.Block) *FabricBlock_GetHCLBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FabricBlock_GetHCLBlock_Call) RunAndReturn(run func() *hcl.Block) *FabricBlock_GetHCLBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewFabricBlock creates a new instance of FabricBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFabricBlock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FabricBlock {
	mock := &FabricBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
