// Code generated by mockery v2.39.1. DO NOT EDIT.

package parser_mocks

import (
	hclsyntax "github.com/hashicorp/hcl/v2/hclsyntax"
	mock "github.com/stretchr/testify/mock"
)

// FabricBlock is an autogenerated mock type for the FabricBlock type
type FabricBlock struct {
	mock.Mock
}

type FabricBlock_Expecter struct {
	mock *mock.Mock
}

func (_m *FabricBlock) EXPECT() *FabricBlock_Expecter {
	return &FabricBlock_Expecter{mock: &_m.Mock}
}

// Block provides a mock function with given fields:
func (_m *FabricBlock) Block() *hclsyntax.Block {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 *hclsyntax.Block
	if rf, ok := ret.Get(0).(func() *hclsyntax.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hclsyntax.Block)
		}
	}

	return r0
}

// FabricBlock_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type FabricBlock_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
func (_e *FabricBlock_Expecter) Block() *FabricBlock_Block_Call {
	return &FabricBlock_Block_Call{Call: _e.mock.On("Block")}
}

func (_c *FabricBlock_Block_Call) Run(run func()) *FabricBlock_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FabricBlock_Block_Call) Return(_a0 *hclsyntax.Block) *FabricBlock_Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FabricBlock_Block_Call) RunAndReturn(run func() *hclsyntax.Block) *FabricBlock_Block_Call {
	_c.Call.Return(run)
	return _c
}

// NewFabricBlock creates a new instance of FabricBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFabricBlock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FabricBlock {
	mock := &FabricBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
